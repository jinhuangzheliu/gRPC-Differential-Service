// The .proto file of the gRPC based Differential service
// File name: differential_service.proto
// Author: Jin Huang(jinhuangzheliu@google.com)
// Reviewers: xihan@google.com, Xuexuan@google.com, and wzong@google.com
// Last Update: 07/07/2020

syntax = "proto3";
package DifferentialService;

// message and service definition
message MsgRequest{
  string request = 1;
}

message MsgReply{
  string reply = 1;
}

message IgnoreCriteria{
  // Defines how to ignore specific fields. Used by message log { ignoreCriteria user_ignore = 5; }
  // When user_ignore is set, ignoreCriteria will work in two ways:
  // 1. ignore some of fields by setting flag as FLAG_IGNORE.
  //    And then, add the fullname of the ignored fields into ignore_fields_list.
  // 2. compare specific fields by setting flag FLAG_COMPARE.
  //    And then, add the fullname of the fields into ignore_fields_list.
  // ignore_fields_list is a repeated element so you can set multiple fields at same time.
  //
  // [ATTENTION: if the field is a nested field you have to add its parent field into the ignore_fields_list.]
  //
  // p.s. We supply three methods in the class ServiceClient to help the user set their ignoreCriteria.
  //      defined in header field ServiceClient.h()
  //        static void blackListCriteria(differentialservice::log& log_message, std::vector<std::string>& field_list);
  //        static void whiteListCriteria(differentialservice::log& log_message, std::vector<std::string>& field_list);
  //        static void RegexCriteria(differentialservice::log* log_message, std::string& regex);
  //
  // In the following sample, the message "company" is nested in the message "employee".
  // If you want to only compare the company::address in two employee messages, you have to first add the
  // xxx.employee.employer and next add the xxx.company.address into the ignore_fields_list. (xxx is the name of package)
  //
  // [.proto file]
  //  message company{
  //    string name = 1;
  //    string occupation = 2;
  //    string address = 3;
  //  }
  //  message employee{
  //    string fullname = 1;
  //    company employer = 2;
  //  }
  //
  // [c++ codes]
  //  std::string parent_field_1("differential_client.employee.employer");
  //  std::string nested_field_1("differential_client.company.name");
  //
  //  std::vector<std::string> compare_fields;
  //  compare_fields.push_back(parent_field_1);
  //  compare_fields.push_back(nested_field_1);
  //
  //  // White list criteria will do the ignore
  //  ServiceClient::whiteListCriteria(log_message, compare_fields);
  //
  enum IgnoreFlag{
    FLAG_IGNORE = 0;
    FLAG_COMPARE = 1;
  }
  IgnoreFlag flag = 1;

  // list of the filed name. If nested field using syntax: ParentFieldName.FieldName.
  repeated string ignore_fields_list = 2;
  // Ignore by regular expression
  string regex = 3;
}

message RepeatedFieldTuple{
  // Defines how to treat the repeated field as List or Set.
  // Used by message log { repeated repeatedFieldTuple repeated_field = 6; }
  // When the repeated_fields is set, repeatedFieldTuple will work in two ways:
  // 1. Treat the repeated file as list-based comparison by setting the flag as FLAG_LIST.
  //    Then, add the name of the repeated field in field_name.
  // 2. Treat the repeated file as list-based comparison by setting the flag as FLAG_SET.
  //    Then, add the name of the repeated field in field_name.
  //
  // You can only set one field in each repeatedFieldTuple. However, we leave the repeated_field
  // at the "message log" as repeated, you can set multiple repeated fields in message log.
  //
  // p.s. We supply a method in the class ServiceClient to help the user set their repeated field comparison as List or Set.
  //      static void treat_repeated_field_list_or_set(differentialservice::log& log_message, int flag, std::string& field_name);
  //
  // [.proto file]
  //  message employee{
  //      repeated areas = 1;
  //  }
  //
  // [C++ codes]
  //  // Set the field areas as list
  //  std::string field_1 = "areas";
  //  ServiceClient::treat_repeated_field_list_or_set(log_message, 0, field_1);

  enum TreatAsFlag{
    FLAG_LIST = 0;
    FLAG_SET = 1;
  }
  TreatAsFlag flag = 1;

  // Set the repeated field name.
  string field_name = 2;
}

message MapCompareTuple{
  // Defines how to compare the repeated field as Map-value pair.
  // user can select one/more specific field/fields as the Map
  // and remaining fields as the Value to compare two messages.
  // When "mapvaluecompare = 7" in message log was set the
  // "name_of_repeated_field" describe the name of repeated field and
  // the "name_of_sub_field" handle the Map field for the comparison.
  // We leave the "name_of_sub_field" as repeated that allow the user select
  // multiple sub-fields as Map.
  //
  // e.g. user can select sub-fields "name" and "degree" as the Map to
  // compare the repeated field 'education' in message employee.
  //
  // p.s. We supply a method in the class ServiceClient to help the user set their repeated field comparison as MAP.
  //      static void treat_repeated_field_map(differentialservice::log& log_message,
  //                                       std::string& field_name,
  //                                       std::vector<std::string>& sub_field_name);
  //
  // [.proto file]
  // message education_info{
  //   string name = 1;
  //   string degree = 2;
  //   string major = 3;
  //   string address = 4;
  // }
  // message employee{
  //   ...
  //   repeated education_info education = 6;
  // }
  //
  // [C++ codes]
  //  std::string map_field_name = "education";
  //  std::vector<std::string> sub_field_list;
  //  sub_field_list.push_back("name");
  //  sub_field_list.push_back("degree");
  //  ServiceClient::treat_repeated_field_map(log_message, map_field_name, sub_field_list);

  // name of repeated field
  string repeated_field = 1;
  // Map field for the comparison
  repeated string key_field = 2;
}

message MapCompareNotSameIndex{
  // Define this interface for the given field will be treated as a map for diffing purposes,
  // with [key] do not appear at the same index.

  string repeated_field = 1; // The repeated field name.
  /*
  Implement the MapKeyComparator to compare two repeated field without same index key field.

  As the following example, we want to compare the field ExamScore
  by Key [first_exam] in the first field and Key [second_exam] in the seconde field

  [Message definition]:
  message ExamScore{
    string first_exam = 1;
    int32 first_score = 2;
    string second_exam = 3;
    int32 seconde_score = 4;
  }

  message TestEmployee{
  repeated ExamScore exam_score = 1;
  }


  [Content of First Message]:
  first_exam = "Mid-term"; <-------- first key
  first_score = 98;
  second_exam = "Final";
  seconde_score = 89;


  [Content of Second Message]:
  first_exam = "Final";
  first_score = 92;
  second_exam = "Mid-term"; <------ second key
  seconde_score = 91;

  */

  string first_key_field = 2;
  string second_key_field = 3;
}

message FloatNumComparison {
  // Defines how to compare the float/double number with fraction and margin.
  // p.s. We supply a method in the class ServiceClient to help the user set the fraction and margin
  //      when compare the float or double value.
  //      static void setFractionAndMargin(differentialservice::log& log_message, double fraction, double margin);
  double fraction = 1;
  double margin = 2;
}

message DiffRequest {
  // Defines how to transmit the input messages from client to server.

  // After structure the input messages, user need serialize these two message to string and write the serialized messages
  // into message_1 and message_2.
  // Because the process on server side will dynamically parse the input messages so user also need transmit the name of
  // message descriptor and all file descriptors(proto) with their dependency into the "name_of_message_descriptor" and
  // "file_descriptor_proto".
  // On the server side, the system will reconstruct the user's message by leveraging the class DescriptorPool with
  // i) serialized messages, ii) name of descriptor, and iii) file descriptor and dependency.
  //
  // p.s. We supply a method in the class ServiceClient to help the user writing the input message into log message.
  //      After structure the input messages user can leverage this method to write the message into log message.
  //      This method will automatically get the name of the message descriptor and the file descriptors.
  //      static void messageWriter(employee* msg_1, employee* msg_2, differentialservice::log* log_msg);
  // [.proto file]
  // message employee{ ... }
  //
  // [C++ Codes]
  //  employee message_first;
  //  employee message_second;
  //  log log_message;
  //
  //  message_first.set_fullname("Jin Huang");
  //  message_first.set_age(32);
  //
  //  message_second.set_fullname("Zhe Liu");
  //  message_second.set_age(32);
  //
  //  ServiceClient::messageWriter(&message_first, &message_second, &log_message);
  bytes first_message = 1;
  bytes second_message = 2;
  string name_of_message_descriptor = 3;
  repeated bytes file_descriptor_proto = 4;

  // Defines how to ignore the specific field.
  IgnoreCriteria user_ignore = 5;

  // Defines how to compare the repeated field
  repeated RepeatedFieldTuple repeated_field = 6;

  // Map-based compare the repeated_field with one/more field.
  repeated MapCompareTuple map_compare = 7;

  // Map-based compare the given repeated field if the [key] field don't appear at the same index.
  MapCompareNotSameIndex map_compare_not_same_index = 8;

  // Set the fraction and margin for float/double number comparison.
  // Add an new commits for test github verson control
  FloatNumComparison float_num_comparison = 9;
}

message DiffResponse {
  // The response of the differential service will be writen in this message.
  // [C++ codes]:
  // DiffResponse differ_response;
  // Status status = stub_->DifferentialService(&context, diff_request, &differ_response);
  // if (status.ok()) {
  //    return differ_response;
  //  } else {
  //    differ_response.set_error(status.error_message());
  //    differ_response.clear_result();
  //    std::cout << status.error_code() << ": " << status.error_message()
  //              << std::endl;
  //    return differ_response;
  //  }

  string result = 1;
  string error = 2;
}

service ServerDifferential {
  // The differential service support two methods to compare two message
  // 1) as default or 2) with customization.

  // To call service methods, user need to create a "std::unique_ptr<DifferentialServer::Stub> stub_"
  // in their channel with the specific server address and port number.
  // For example,
  //    class ServiceClient {
  //      public:
  //        explicit ServiceClient(const std::chared_ptr<Channel>& channel)
  //                      : stub_(DifferentialServer::NewStub(channel)) {}
  //
  //      private:
  //        std::unique_ptr<DifferentialServer::Stub> stub_;
  //
  //    int main(...) {
  //        std::string target_str;    // Establish the gRPC channel with the port number.
  //        target_str = "0.0.0.0:50053";

  //        //Initial the service client instance.
  //        ServiceClient serviceClient(
  //        grpc::CreateChannel(target_str, grpc::InsecureChannelCredentials()));


  // Declare a method to check the connect between the client and server that send a query and receive a response from server.
  // This method was call by the stub of DifferentialServer. User's query is passed by "message MsgRequest{ ... }" and
  // server's response receive from "message MsgReply { ... }"
  // For example,
  //    class ServiceClient {
  //      public:
  //        std::string GetConnect(const std::string& msg){
  //          ...
  //          MsgRequest request;
  //          request.set_request(msg);
  //
  //          MsgReply reply;
  //
  //          ClientContext context;
  //
  //          Status status = stub_->GetConnect(&context, request, &reply);
  //          ...
  //        }
  //      private:
  //        std::unique_ptr<DifferentialServer::Stub> stub_;
  //    }
  rpc GetConnect(MsgRequest) returns (MsgReply) {}


  // Declare how to compare two user input messages as default by MessageDifferencer::Compare().
  // Users have to structure their message as "message log { ...}" defined below this file.
  // Similar to the previous method this method is called by stub of DifferentialServer and
  // passed "message log{}" and the differential result will output by "message result{}".
  // For example,
  //    class ServiceClient {
  //      public:
  //        std::string DefaultDifferentialService(...){
  //          ...
  //          differentialservice::log log_message;
  //          differentialservice::reslut res;
  //          Status status = stub_->DefaultDifferentialService( ..., log_message, res);
  //          ...
  //        }
  //      private:
  //        std::unique_ptr<DifferentialServer::Stub> stub_;
  //    }
  rpc DefaultDifferentialService (DiffRequest) returns (DiffResponse) {}


  // Declare a customize differential service
  // 1. Add one/more ignore criteria.
  //    By setting the "ignoreCriteria user_ignore = 5;" in "message log {}",
  //    user can implement their customized ignore criteria.
  //    In "message ignoreCriteria{...}" user can select the flag to
  //    ignore or compare some specific fields. And also can ignore the field
  //    by regular expression.
  //
  // 2. Compare the repeated fields as LIST or SET.
  //    By setting "repeated repeatedFieldTuple repeated_field_list = 6",
  //    user can compare the specific repeated filed base-on List or Set.
  //    In "message repeatedFieldTuple{...}" user can set the treatAsFlag to
  //    compare the repeated field.
  //
  // 3. Compare the repeated fields as Map.
  //    By setting "repeated mapvalueTuple mapvaluecompare = 7;",
  //    user can compare the repeated field as a map-value pair.
  //
  // 4. Set the fraction and margin to float/double comparison.
  //    By setting "float_comparison fraction_margin = 8;"
  //    User could approximate the comparison of float/double number.
  rpc DifferentialService (DiffRequest) returns (DiffResponse) {}
}



