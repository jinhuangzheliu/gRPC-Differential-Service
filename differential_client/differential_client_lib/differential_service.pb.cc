// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: differential_service.proto

#include "differential_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_differential_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatNumComparison_differential_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_differential_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IgnoreCriteria_differential_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_differential_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapCompare_differential_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_differential_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapCompareNotSameIndex_differential_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_differential_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedField_differential_5fservice_2eproto;
namespace DifferentialService {
class MsgRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgRequest> _instance;
} _MsgRequest_default_instance_;
class MsgReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgReply> _instance;
} _MsgReply_default_instance_;
class IgnoreCriteriaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IgnoreCriteria> _instance;
} _IgnoreCriteria_default_instance_;
class RepeatedFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RepeatedField> _instance;
} _RepeatedField_default_instance_;
class MapCompareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapCompare> _instance;
} _MapCompare_default_instance_;
class MapCompareNotSameIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapCompareNotSameIndex> _instance;
} _MapCompareNotSameIndex_default_instance_;
class FloatNumComparisonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatNumComparison> _instance;
} _FloatNumComparison_default_instance_;
class DiffRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiffRequest> _instance;
} _DiffRequest_default_instance_;
class DiffResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiffResponse> _instance;
} _DiffResponse_default_instance_;
}  // namespace DifferentialService
static void InitDefaultsscc_info_DiffRequest_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DifferentialService::_DiffRequest_default_instance_;
    new (ptr) ::DifferentialService::DiffRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DifferentialService::DiffRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DiffRequest_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_DiffRequest_differential_5fservice_2eproto}, {
      &scc_info_IgnoreCriteria_differential_5fservice_2eproto.base,
      &scc_info_RepeatedField_differential_5fservice_2eproto.base,
      &scc_info_MapCompare_differential_5fservice_2eproto.base,
      &scc_info_MapCompareNotSameIndex_differential_5fservice_2eproto.base,
      &scc_info_FloatNumComparison_differential_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_DiffResponse_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DifferentialService::_DiffResponse_default_instance_;
    new (ptr) ::DifferentialService::DiffResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DifferentialService::DiffResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiffResponse_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DiffResponse_differential_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_FloatNumComparison_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DifferentialService::_FloatNumComparison_default_instance_;
    new (ptr) ::DifferentialService::FloatNumComparison();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DifferentialService::FloatNumComparison::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatNumComparison_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FloatNumComparison_differential_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_IgnoreCriteria_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DifferentialService::_IgnoreCriteria_default_instance_;
    new (ptr) ::DifferentialService::IgnoreCriteria();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DifferentialService::IgnoreCriteria::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IgnoreCriteria_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IgnoreCriteria_differential_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_MapCompare_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DifferentialService::_MapCompare_default_instance_;
    new (ptr) ::DifferentialService::MapCompare();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DifferentialService::MapCompare::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapCompare_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MapCompare_differential_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_MapCompareNotSameIndex_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DifferentialService::_MapCompareNotSameIndex_default_instance_;
    new (ptr) ::DifferentialService::MapCompareNotSameIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DifferentialService::MapCompareNotSameIndex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapCompareNotSameIndex_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MapCompareNotSameIndex_differential_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_MsgReply_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DifferentialService::_MsgReply_default_instance_;
    new (ptr) ::DifferentialService::MsgReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DifferentialService::MsgReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgReply_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgReply_differential_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_MsgRequest_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DifferentialService::_MsgRequest_default_instance_;
    new (ptr) ::DifferentialService::MsgRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DifferentialService::MsgRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgRequest_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgRequest_differential_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_RepeatedField_differential_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DifferentialService::_RepeatedField_default_instance_;
    new (ptr) ::DifferentialService::RepeatedField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DifferentialService::RepeatedField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RepeatedField_differential_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RepeatedField_differential_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_differential_5fservice_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_differential_5fservice_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_differential_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_differential_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::MsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::MsgRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::MsgReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::MsgReply, reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::IgnoreCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::IgnoreCriteria, flag_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::IgnoreCriteria, ignore_fields_list_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::IgnoreCriteria, regex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::RepeatedField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::RepeatedField, flag_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::RepeatedField, field_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::MapCompare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::MapCompare, repeated_field_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::MapCompare, key_field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::MapCompareNotSameIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::MapCompareNotSameIndex, repeated_field_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::MapCompareNotSameIndex, first_key_field_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::MapCompareNotSameIndex, second_key_field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::FloatNumComparison, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::FloatNumComparison, fraction_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::FloatNumComparison, margin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::DiffRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::DiffRequest, first_message_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::DiffRequest, second_message_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::DiffRequest, name_of_message_descriptor_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::DiffRequest, file_descriptor_proto_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::DiffRequest, user_ignore_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::DiffRequest, repeated_field_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::DiffRequest, map_compare_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::DiffRequest, map_compare_not_same_index_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::DiffRequest, float_num_comparison_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::DiffResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DifferentialService::DiffResponse, result_),
  PROTOBUF_FIELD_OFFSET(::DifferentialService::DiffResponse, error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DifferentialService::MsgRequest)},
  { 6, -1, sizeof(::DifferentialService::MsgReply)},
  { 12, -1, sizeof(::DifferentialService::IgnoreCriteria)},
  { 20, -1, sizeof(::DifferentialService::RepeatedField)},
  { 27, -1, sizeof(::DifferentialService::MapCompare)},
  { 34, -1, sizeof(::DifferentialService::MapCompareNotSameIndex)},
  { 42, -1, sizeof(::DifferentialService::FloatNumComparison)},
  { 49, -1, sizeof(::DifferentialService::DiffRequest)},
  { 63, -1, sizeof(::DifferentialService::DiffResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DifferentialService::_MsgRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DifferentialService::_MsgReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DifferentialService::_IgnoreCriteria_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DifferentialService::_RepeatedField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DifferentialService::_MapCompare_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DifferentialService::_MapCompareNotSameIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DifferentialService::_FloatNumComparison_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DifferentialService::_DiffRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DifferentialService::_DiffResponse_default_instance_),
};

const char descriptor_table_protodef_differential_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032differential_service.proto\022\023Differenti"
  "alService\"\035\n\nMsgRequest\022\017\n\007request\030\001 \001(\t"
  "\"\031\n\010MsgReply\022\r\n\005reply\030\001 \001(\t\"\252\001\n\016IgnoreCr"
  "iteria\022<\n\004flag\030\001 \001(\0162..DifferentialServi"
  "ce.IgnoreCriteria.IgnoreFlag\022\032\n\022ignore_f"
  "ields_list\030\002 \003(\t\022\r\n\005regex\030\003 \001(\t\"/\n\nIgnor"
  "eFlag\022\017\n\013FLAG_IGNORE\020\000\022\020\n\014FLAG_COMPARE\020\001"
  "\"\215\001\n\rRepeatedField\022<\n\004flag\030\001 \001(\0162..Diffe"
  "rentialService.RepeatedField.TreatAsFlag"
  "\022\022\n\nfield_name\030\002 \001(\t\"*\n\013TreatAsFlag\022\r\n\tF"
  "LAG_LIST\020\000\022\014\n\010FLAG_SET\020\001\"7\n\nMapCompare\022\026"
  "\n\016repeated_field\030\001 \001(\t\022\021\n\tkey_field\030\002 \003("
  "\t\"c\n\026MapCompareNotSameIndex\022\026\n\016repeated_"
  "field\030\001 \001(\t\022\027\n\017first_key_field\030\002 \001(\t\022\030\n\020"
  "second_key_field\030\003 \001(\t\"6\n\022FloatNumCompar"
  "ison\022\020\n\010fraction\030\001 \001(\001\022\016\n\006margin\030\002 \001(\001\"\303"
  "\003\n\013DiffRequest\022\025\n\rfirst_message\030\001 \001(\014\022\026\n"
  "\016second_message\030\002 \001(\014\022\"\n\032name_of_message"
  "_descriptor\030\003 \001(\t\022\035\n\025file_descriptor_pro"
  "to\030\004 \003(\014\0228\n\013user_ignore\030\005 \001(\0132#.Differen"
  "tialService.IgnoreCriteria\022:\n\016repeated_f"
  "ield\030\006 \003(\0132\".DifferentialService.Repeate"
  "dField\0224\n\013map_compare\030\007 \003(\0132\037.Differenti"
  "alService.MapCompare\022O\n\032map_compare_not_"
  "same_index\030\010 \001(\0132+.DifferentialService.M"
  "apCompareNotSameIndex\022E\n\024float_num_compa"
  "rison\030\t \001(\0132\'.DifferentialService.FloatN"
  "umComparison\"-\n\014DiffResponse\022\016\n\006result\030\001"
  " \001(\t\022\r\n\005error\030\002 \001(\t2\303\001\n\022ServerDifferenti"
  "al\022N\n\nGetConnect\022\037.DifferentialService.M"
  "sgRequest\032\035.DifferentialService.MsgReply"
  "\"\000\022]\n\024CompareInputMessages\022 .Differentia"
  "lService.DiffRequest\032!.DifferentialServi"
  "ce.DiffResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_differential_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_differential_5fservice_2eproto_sccs[9] = {
  &scc_info_DiffRequest_differential_5fservice_2eproto.base,
  &scc_info_DiffResponse_differential_5fservice_2eproto.base,
  &scc_info_FloatNumComparison_differential_5fservice_2eproto.base,
  &scc_info_IgnoreCriteria_differential_5fservice_2eproto.base,
  &scc_info_MapCompare_differential_5fservice_2eproto.base,
  &scc_info_MapCompareNotSameIndex_differential_5fservice_2eproto.base,
  &scc_info_MsgReply_differential_5fservice_2eproto.base,
  &scc_info_MsgRequest_differential_5fservice_2eproto.base,
  &scc_info_RepeatedField_differential_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_differential_5fservice_2eproto_once;
static bool descriptor_table_differential_5fservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_differential_5fservice_2eproto = {
  &descriptor_table_differential_5fservice_2eproto_initialized, descriptor_table_protodef_differential_5fservice_2eproto, "differential_service.proto", 1345,
  &descriptor_table_differential_5fservice_2eproto_once, descriptor_table_differential_5fservice_2eproto_sccs, descriptor_table_differential_5fservice_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_differential_5fservice_2eproto::offsets,
  file_level_metadata_differential_5fservice_2eproto, 9, file_level_enum_descriptors_differential_5fservice_2eproto, file_level_service_descriptors_differential_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_differential_5fservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_differential_5fservice_2eproto), true);
namespace DifferentialService {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IgnoreCriteria_IgnoreFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_differential_5fservice_2eproto);
  return file_level_enum_descriptors_differential_5fservice_2eproto[0];
}
bool IgnoreCriteria_IgnoreFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IgnoreCriteria_IgnoreFlag IgnoreCriteria::FLAG_IGNORE;
constexpr IgnoreCriteria_IgnoreFlag IgnoreCriteria::FLAG_COMPARE;
constexpr IgnoreCriteria_IgnoreFlag IgnoreCriteria::IgnoreFlag_MIN;
constexpr IgnoreCriteria_IgnoreFlag IgnoreCriteria::IgnoreFlag_MAX;
constexpr int IgnoreCriteria::IgnoreFlag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RepeatedField_TreatAsFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_differential_5fservice_2eproto);
  return file_level_enum_descriptors_differential_5fservice_2eproto[1];
}
bool RepeatedField_TreatAsFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RepeatedField_TreatAsFlag RepeatedField::FLAG_LIST;
constexpr RepeatedField_TreatAsFlag RepeatedField::FLAG_SET;
constexpr RepeatedField_TreatAsFlag RepeatedField::TreatAsFlag_MIN;
constexpr RepeatedField_TreatAsFlag RepeatedField::TreatAsFlag_MAX;
constexpr int RepeatedField::TreatAsFlag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MsgRequest::InitAsDefaultInstance() {
}
class MsgRequest::_Internal {
 public:
};

MsgRequest::MsgRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DifferentialService.MsgRequest)
}
MsgRequest::MsgRequest(const MsgRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request().empty()) {
    request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_);
  }
  // @@protoc_insertion_point(copy_constructor:DifferentialService.MsgRequest)
}

void MsgRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgRequest_differential_5fservice_2eproto.base);
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MsgRequest::~MsgRequest() {
  // @@protoc_insertion_point(destructor:DifferentialService.MsgRequest)
  SharedDtor();
}

void MsgRequest::SharedDtor() {
  request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgRequest& MsgRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgRequest_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DifferentialService.MsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MsgRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DifferentialService.MsgRequest.request"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DifferentialService.MsgRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request = 1;
  if (this->request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request().data(), static_cast<int>(this->_internal_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DifferentialService.MsgRequest.request");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DifferentialService.MsgRequest)
  return target;
}

size_t MsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DifferentialService.MsgRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request = 1;
  if (this->request().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DifferentialService.MsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DifferentialService.MsgRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DifferentialService.MsgRequest)
    MergeFrom(*source);
  }
}

void MsgRequest::MergeFrom(const MsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DifferentialService.MsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request().size() > 0) {

    request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_);
  }
}

void MsgRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DifferentialService.MsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRequest::CopyFrom(const MsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DifferentialService.MsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRequest::IsInitialized() const {
  return true;
}

void MsgRequest::InternalSwap(MsgRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_.Swap(&other->request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgReply::InitAsDefaultInstance() {
}
class MsgReply::_Internal {
 public:
};

MsgReply::MsgReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DifferentialService.MsgReply)
}
MsgReply::MsgReply(const MsgReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reply().empty()) {
    reply_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reply_);
  }
  // @@protoc_insertion_point(copy_constructor:DifferentialService.MsgReply)
}

void MsgReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgReply_differential_5fservice_2eproto.base);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MsgReply::~MsgReply() {
  // @@protoc_insertion_point(destructor:DifferentialService.MsgReply)
  SharedDtor();
}

void MsgReply::SharedDtor() {
  reply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgReply& MsgReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgReply_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MsgReply::Clear() {
// @@protoc_insertion_point(message_clear_start:DifferentialService.MsgReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reply_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MsgReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DifferentialService.MsgReply.reply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DifferentialService.MsgReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reply = 1;
  if (this->reply().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply().data(), static_cast<int>(this->_internal_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DifferentialService.MsgReply.reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DifferentialService.MsgReply)
  return target;
}

size_t MsgReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DifferentialService.MsgReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reply = 1;
  if (this->reply().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DifferentialService.MsgReply)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DifferentialService.MsgReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DifferentialService.MsgReply)
    MergeFrom(*source);
  }
}

void MsgReply::MergeFrom(const MsgReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DifferentialService.MsgReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reply().size() > 0) {

    reply_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reply_);
  }
}

void MsgReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DifferentialService.MsgReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReply::CopyFrom(const MsgReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DifferentialService.MsgReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReply::IsInitialized() const {
  return true;
}

void MsgReply::InternalSwap(MsgReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reply_.Swap(&other->reply_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IgnoreCriteria::InitAsDefaultInstance() {
}
class IgnoreCriteria::_Internal {
 public:
};

IgnoreCriteria::IgnoreCriteria()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DifferentialService.IgnoreCriteria)
}
IgnoreCriteria::IgnoreCriteria(const IgnoreCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ignore_fields_list_(from.ignore_fields_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regex().empty()) {
    regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regex_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:DifferentialService.IgnoreCriteria)
}

void IgnoreCriteria::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IgnoreCriteria_differential_5fservice_2eproto.base);
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

IgnoreCriteria::~IgnoreCriteria() {
  // @@protoc_insertion_point(destructor:DifferentialService.IgnoreCriteria)
  SharedDtor();
}

void IgnoreCriteria::SharedDtor() {
  regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IgnoreCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IgnoreCriteria& IgnoreCriteria::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IgnoreCriteria_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void IgnoreCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:DifferentialService.IgnoreCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ignore_fields_list_.Clear();
  regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

const char* IgnoreCriteria::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DifferentialService.IgnoreCriteria.IgnoreFlag flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::DifferentialService::IgnoreCriteria_IgnoreFlag>(val));
        } else goto handle_unusual;
        continue;
      // repeated string ignore_fields_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ignore_fields_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DifferentialService.IgnoreCriteria.ignore_fields_list"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string regex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_regex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DifferentialService.IgnoreCriteria.regex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IgnoreCriteria::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DifferentialService.IgnoreCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DifferentialService.IgnoreCriteria.IgnoreFlag flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flag(), target);
  }

  // repeated string ignore_fields_list = 2;
  for (int i = 0, n = this->_internal_ignore_fields_list_size(); i < n; i++) {
    const auto& s = this->_internal_ignore_fields_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DifferentialService.IgnoreCriteria.ignore_fields_list");
    target = stream->WriteString(2, s, target);
  }

  // string regex = 3;
  if (this->regex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regex().data(), static_cast<int>(this->_internal_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DifferentialService.IgnoreCriteria.regex");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_regex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DifferentialService.IgnoreCriteria)
  return target;
}

size_t IgnoreCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DifferentialService.IgnoreCriteria)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ignore_fields_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ignore_fields_list_.size());
  for (int i = 0, n = ignore_fields_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ignore_fields_list_.Get(i));
  }

  // string regex = 3;
  if (this->regex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regex());
  }

  // .DifferentialService.IgnoreCriteria.IgnoreFlag flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IgnoreCriteria::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DifferentialService.IgnoreCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const IgnoreCriteria* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IgnoreCriteria>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DifferentialService.IgnoreCriteria)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DifferentialService.IgnoreCriteria)
    MergeFrom(*source);
  }
}

void IgnoreCriteria::MergeFrom(const IgnoreCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DifferentialService.IgnoreCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ignore_fields_list_.MergeFrom(from.ignore_fields_list_);
  if (from.regex().size() > 0) {

    regex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regex_);
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void IgnoreCriteria::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DifferentialService.IgnoreCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IgnoreCriteria::CopyFrom(const IgnoreCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DifferentialService.IgnoreCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IgnoreCriteria::IsInitialized() const {
  return true;
}

void IgnoreCriteria::InternalSwap(IgnoreCriteria* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ignore_fields_list_.InternalSwap(&other->ignore_fields_list_);
  regex_.Swap(&other->regex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IgnoreCriteria::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RepeatedField::InitAsDefaultInstance() {
}
class RepeatedField::_Internal {
 public:
};

RepeatedField::RepeatedField()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DifferentialService.RepeatedField)
}
RepeatedField::RepeatedField(const RepeatedField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field_name().empty()) {
    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:DifferentialService.RepeatedField)
}

void RepeatedField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RepeatedField_differential_5fservice_2eproto.base);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
}

RepeatedField::~RepeatedField() {
  // @@protoc_insertion_point(destructor:DifferentialService.RepeatedField)
  SharedDtor();
}

void RepeatedField::SharedDtor() {
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RepeatedField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RepeatedField& RepeatedField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RepeatedField_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RepeatedField::Clear() {
// @@protoc_insertion_point(message_clear_start:DifferentialService.RepeatedField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  _internal_metadata_.Clear();
}

const char* RepeatedField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DifferentialService.RepeatedField.TreatAsFlag flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::DifferentialService::RepeatedField_TreatAsFlag>(val));
        } else goto handle_unusual;
        continue;
      // string field_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DifferentialService.RepeatedField.field_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RepeatedField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DifferentialService.RepeatedField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DifferentialService.RepeatedField.TreatAsFlag flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flag(), target);
  }

  // string field_name = 2;
  if (this->field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field_name().data(), static_cast<int>(this->_internal_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DifferentialService.RepeatedField.field_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_field_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DifferentialService.RepeatedField)
  return target;
}

size_t RepeatedField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DifferentialService.RepeatedField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field_name = 2;
  if (this->field_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field_name());
  }

  // .DifferentialService.RepeatedField.TreatAsFlag flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RepeatedField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DifferentialService.RepeatedField)
  GOOGLE_DCHECK_NE(&from, this);
  const RepeatedField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RepeatedField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DifferentialService.RepeatedField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DifferentialService.RepeatedField)
    MergeFrom(*source);
  }
}

void RepeatedField::MergeFrom(const RepeatedField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DifferentialService.RepeatedField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_name().size() > 0) {

    field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_name_);
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void RepeatedField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DifferentialService.RepeatedField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepeatedField::CopyFrom(const RepeatedField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DifferentialService.RepeatedField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepeatedField::IsInitialized() const {
  return true;
}

void RepeatedField::InternalSwap(RepeatedField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_name_.Swap(&other->field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RepeatedField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapCompare::InitAsDefaultInstance() {
}
class MapCompare::_Internal {
 public:
};

MapCompare::MapCompare()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DifferentialService.MapCompare)
}
MapCompare::MapCompare(const MapCompare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      key_field_(from.key_field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  repeated_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repeated_field().empty()) {
    repeated_field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repeated_field_);
  }
  // @@protoc_insertion_point(copy_constructor:DifferentialService.MapCompare)
}

void MapCompare::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapCompare_differential_5fservice_2eproto.base);
  repeated_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MapCompare::~MapCompare() {
  // @@protoc_insertion_point(destructor:DifferentialService.MapCompare)
  SharedDtor();
}

void MapCompare::SharedDtor() {
  repeated_field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapCompare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapCompare& MapCompare::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapCompare_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MapCompare::Clear() {
// @@protoc_insertion_point(message_clear_start:DifferentialService.MapCompare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_field_.Clear();
  repeated_field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MapCompare::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string repeated_field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_repeated_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DifferentialService.MapCompare.repeated_field"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string key_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_key_field();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DifferentialService.MapCompare.key_field"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapCompare::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DifferentialService.MapCompare)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string repeated_field = 1;
  if (this->repeated_field().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repeated_field().data(), static_cast<int>(this->_internal_repeated_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DifferentialService.MapCompare.repeated_field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_repeated_field(), target);
  }

  // repeated string key_field = 2;
  for (int i = 0, n = this->_internal_key_field_size(); i < n; i++) {
    const auto& s = this->_internal_key_field(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DifferentialService.MapCompare.key_field");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DifferentialService.MapCompare)
  return target;
}

size_t MapCompare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DifferentialService.MapCompare)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string key_field = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(key_field_.size());
  for (int i = 0, n = key_field_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      key_field_.Get(i));
  }

  // string repeated_field = 1;
  if (this->repeated_field().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repeated_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapCompare::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DifferentialService.MapCompare)
  GOOGLE_DCHECK_NE(&from, this);
  const MapCompare* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapCompare>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DifferentialService.MapCompare)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DifferentialService.MapCompare)
    MergeFrom(*source);
  }
}

void MapCompare::MergeFrom(const MapCompare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DifferentialService.MapCompare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_field_.MergeFrom(from.key_field_);
  if (from.repeated_field().size() > 0) {

    repeated_field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repeated_field_);
  }
}

void MapCompare::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DifferentialService.MapCompare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapCompare::CopyFrom(const MapCompare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DifferentialService.MapCompare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapCompare::IsInitialized() const {
  return true;
}

void MapCompare::InternalSwap(MapCompare* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_field_.InternalSwap(&other->key_field_);
  repeated_field_.Swap(&other->repeated_field_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MapCompare::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapCompareNotSameIndex::InitAsDefaultInstance() {
}
class MapCompareNotSameIndex::_Internal {
 public:
};

MapCompareNotSameIndex::MapCompareNotSameIndex()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DifferentialService.MapCompareNotSameIndex)
}
MapCompareNotSameIndex::MapCompareNotSameIndex(const MapCompareNotSameIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  repeated_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_repeated_field().empty()) {
    repeated_field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repeated_field_);
  }
  first_key_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_key_field().empty()) {
    first_key_field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_key_field_);
  }
  second_key_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_second_key_field().empty()) {
    second_key_field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.second_key_field_);
  }
  // @@protoc_insertion_point(copy_constructor:DifferentialService.MapCompareNotSameIndex)
}

void MapCompareNotSameIndex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapCompareNotSameIndex_differential_5fservice_2eproto.base);
  repeated_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_key_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  second_key_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MapCompareNotSameIndex::~MapCompareNotSameIndex() {
  // @@protoc_insertion_point(destructor:DifferentialService.MapCompareNotSameIndex)
  SharedDtor();
}

void MapCompareNotSameIndex::SharedDtor() {
  repeated_field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_key_field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  second_key_field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MapCompareNotSameIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapCompareNotSameIndex& MapCompareNotSameIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapCompareNotSameIndex_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void MapCompareNotSameIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:DifferentialService.MapCompareNotSameIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_key_field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  second_key_field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MapCompareNotSameIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string repeated_field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_repeated_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DifferentialService.MapCompareNotSameIndex.repeated_field"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string first_key_field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_first_key_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DifferentialService.MapCompareNotSameIndex.first_key_field"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string second_key_field = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_second_key_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DifferentialService.MapCompareNotSameIndex.second_key_field"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapCompareNotSameIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DifferentialService.MapCompareNotSameIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string repeated_field = 1;
  if (this->repeated_field().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repeated_field().data(), static_cast<int>(this->_internal_repeated_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DifferentialService.MapCompareNotSameIndex.repeated_field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_repeated_field(), target);
  }

  // string first_key_field = 2;
  if (this->first_key_field().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_key_field().data(), static_cast<int>(this->_internal_first_key_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DifferentialService.MapCompareNotSameIndex.first_key_field");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_first_key_field(), target);
  }

  // string second_key_field = 3;
  if (this->second_key_field().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_second_key_field().data(), static_cast<int>(this->_internal_second_key_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DifferentialService.MapCompareNotSameIndex.second_key_field");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_second_key_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DifferentialService.MapCompareNotSameIndex)
  return target;
}

size_t MapCompareNotSameIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DifferentialService.MapCompareNotSameIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string repeated_field = 1;
  if (this->repeated_field().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repeated_field());
  }

  // string first_key_field = 2;
  if (this->first_key_field().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_key_field());
  }

  // string second_key_field = 3;
  if (this->second_key_field().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_second_key_field());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapCompareNotSameIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DifferentialService.MapCompareNotSameIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const MapCompareNotSameIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapCompareNotSameIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DifferentialService.MapCompareNotSameIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DifferentialService.MapCompareNotSameIndex)
    MergeFrom(*source);
  }
}

void MapCompareNotSameIndex::MergeFrom(const MapCompareNotSameIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DifferentialService.MapCompareNotSameIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.repeated_field().size() > 0) {

    repeated_field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repeated_field_);
  }
  if (from.first_key_field().size() > 0) {

    first_key_field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_key_field_);
  }
  if (from.second_key_field().size() > 0) {

    second_key_field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.second_key_field_);
  }
}

void MapCompareNotSameIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DifferentialService.MapCompareNotSameIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapCompareNotSameIndex::CopyFrom(const MapCompareNotSameIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DifferentialService.MapCompareNotSameIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapCompareNotSameIndex::IsInitialized() const {
  return true;
}

void MapCompareNotSameIndex::InternalSwap(MapCompareNotSameIndex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  repeated_field_.Swap(&other->repeated_field_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_key_field_.Swap(&other->first_key_field_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  second_key_field_.Swap(&other->second_key_field_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MapCompareNotSameIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FloatNumComparison::InitAsDefaultInstance() {
}
class FloatNumComparison::_Internal {
 public:
};

FloatNumComparison::FloatNumComparison()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DifferentialService.FloatNumComparison)
}
FloatNumComparison::FloatNumComparison(const FloatNumComparison& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fraction_, &from.fraction_,
    static_cast<size_t>(reinterpret_cast<char*>(&margin_) -
    reinterpret_cast<char*>(&fraction_)) + sizeof(margin_));
  // @@protoc_insertion_point(copy_constructor:DifferentialService.FloatNumComparison)
}

void FloatNumComparison::SharedCtor() {
  ::memset(&fraction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&margin_) -
      reinterpret_cast<char*>(&fraction_)) + sizeof(margin_));
}

FloatNumComparison::~FloatNumComparison() {
  // @@protoc_insertion_point(destructor:DifferentialService.FloatNumComparison)
  SharedDtor();
}

void FloatNumComparison::SharedDtor() {
}

void FloatNumComparison::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatNumComparison& FloatNumComparison::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatNumComparison_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void FloatNumComparison::Clear() {
// @@protoc_insertion_point(message_clear_start:DifferentialService.FloatNumComparison)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fraction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&margin_) -
      reinterpret_cast<char*>(&fraction_)) + sizeof(margin_));
  _internal_metadata_.Clear();
}

const char* FloatNumComparison::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double fraction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double margin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatNumComparison::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DifferentialService.FloatNumComparison)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double fraction = 1;
  if (!(this->fraction() <= 0 && this->fraction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_fraction(), target);
  }

  // double margin = 2;
  if (!(this->margin() <= 0 && this->margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_margin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DifferentialService.FloatNumComparison)
  return target;
}

size_t FloatNumComparison::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DifferentialService.FloatNumComparison)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double fraction = 1;
  if (!(this->fraction() <= 0 && this->fraction() >= 0)) {
    total_size += 1 + 8;
  }

  // double margin = 2;
  if (!(this->margin() <= 0 && this->margin() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatNumComparison::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DifferentialService.FloatNumComparison)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatNumComparison* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatNumComparison>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DifferentialService.FloatNumComparison)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DifferentialService.FloatNumComparison)
    MergeFrom(*source);
  }
}

void FloatNumComparison::MergeFrom(const FloatNumComparison& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DifferentialService.FloatNumComparison)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.fraction() <= 0 && from.fraction() >= 0)) {
    _internal_set_fraction(from._internal_fraction());
  }
  if (!(from.margin() <= 0 && from.margin() >= 0)) {
    _internal_set_margin(from._internal_margin());
  }
}

void FloatNumComparison::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DifferentialService.FloatNumComparison)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatNumComparison::CopyFrom(const FloatNumComparison& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DifferentialService.FloatNumComparison)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatNumComparison::IsInitialized() const {
  return true;
}

void FloatNumComparison::InternalSwap(FloatNumComparison* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fraction_, other->fraction_);
  swap(margin_, other->margin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatNumComparison::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiffRequest::InitAsDefaultInstance() {
  ::DifferentialService::_DiffRequest_default_instance_._instance.get_mutable()->user_ignore_ = const_cast< ::DifferentialService::IgnoreCriteria*>(
      ::DifferentialService::IgnoreCriteria::internal_default_instance());
  ::DifferentialService::_DiffRequest_default_instance_._instance.get_mutable()->map_compare_not_same_index_ = const_cast< ::DifferentialService::MapCompareNotSameIndex*>(
      ::DifferentialService::MapCompareNotSameIndex::internal_default_instance());
  ::DifferentialService::_DiffRequest_default_instance_._instance.get_mutable()->float_num_comparison_ = const_cast< ::DifferentialService::FloatNumComparison*>(
      ::DifferentialService::FloatNumComparison::internal_default_instance());
}
class DiffRequest::_Internal {
 public:
  static const ::DifferentialService::IgnoreCriteria& user_ignore(const DiffRequest* msg);
  static const ::DifferentialService::MapCompareNotSameIndex& map_compare_not_same_index(const DiffRequest* msg);
  static const ::DifferentialService::FloatNumComparison& float_num_comparison(const DiffRequest* msg);
};

const ::DifferentialService::IgnoreCriteria&
DiffRequest::_Internal::user_ignore(const DiffRequest* msg) {
  return *msg->user_ignore_;
}
const ::DifferentialService::MapCompareNotSameIndex&
DiffRequest::_Internal::map_compare_not_same_index(const DiffRequest* msg) {
  return *msg->map_compare_not_same_index_;
}
const ::DifferentialService::FloatNumComparison&
DiffRequest::_Internal::float_num_comparison(const DiffRequest* msg) {
  return *msg->float_num_comparison_;
}
DiffRequest::DiffRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DifferentialService.DiffRequest)
}
DiffRequest::DiffRequest(const DiffRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      file_descriptor_proto_(from.file_descriptor_proto_),
      repeated_field_(from.repeated_field_),
      map_compare_(from.map_compare_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  first_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_first_message().empty()) {
    first_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_message_);
  }
  second_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_second_message().empty()) {
    second_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.second_message_);
  }
  name_of_message_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_of_message_descriptor().empty()) {
    name_of_message_descriptor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_of_message_descriptor_);
  }
  if (from._internal_has_user_ignore()) {
    user_ignore_ = new ::DifferentialService::IgnoreCriteria(*from.user_ignore_);
  } else {
    user_ignore_ = nullptr;
  }
  if (from._internal_has_map_compare_not_same_index()) {
    map_compare_not_same_index_ = new ::DifferentialService::MapCompareNotSameIndex(*from.map_compare_not_same_index_);
  } else {
    map_compare_not_same_index_ = nullptr;
  }
  if (from._internal_has_float_num_comparison()) {
    float_num_comparison_ = new ::DifferentialService::FloatNumComparison(*from.float_num_comparison_);
  } else {
    float_num_comparison_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DifferentialService.DiffRequest)
}

void DiffRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiffRequest_differential_5fservice_2eproto.base);
  first_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  second_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_of_message_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_ignore_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&float_num_comparison_) -
      reinterpret_cast<char*>(&user_ignore_)) + sizeof(float_num_comparison_));
}

DiffRequest::~DiffRequest() {
  // @@protoc_insertion_point(destructor:DifferentialService.DiffRequest)
  SharedDtor();
}

void DiffRequest::SharedDtor() {
  first_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  second_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_of_message_descriptor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_ignore_;
  if (this != internal_default_instance()) delete map_compare_not_same_index_;
  if (this != internal_default_instance()) delete float_num_comparison_;
}

void DiffRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiffRequest& DiffRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiffRequest_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DiffRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DifferentialService.DiffRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_descriptor_proto_.Clear();
  repeated_field_.Clear();
  map_compare_.Clear();
  first_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  second_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_of_message_descriptor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ignore_ != nullptr) {
    delete user_ignore_;
  }
  user_ignore_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && map_compare_not_same_index_ != nullptr) {
    delete map_compare_not_same_index_;
  }
  map_compare_not_same_index_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && float_num_comparison_ != nullptr) {
    delete float_num_comparison_;
  }
  float_num_comparison_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DiffRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes first_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_first_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes second_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_second_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name_of_message_descriptor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name_of_message_descriptor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DifferentialService.DiffRequest.name_of_message_descriptor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes file_descriptor_proto = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_file_descriptor_proto();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .DifferentialService.IgnoreCriteria user_ignore = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_ignore(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DifferentialService.RepeatedField repeated_field = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repeated_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DifferentialService.MapCompare map_compare = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_compare(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .DifferentialService.MapCompareNotSameIndex map_compare_not_same_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_compare_not_same_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DifferentialService.FloatNumComparison float_num_comparison = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_num_comparison(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiffRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DifferentialService.DiffRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes first_message = 1;
  if (this->first_message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_first_message(), target);
  }

  // bytes second_message = 2;
  if (this->second_message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_second_message(), target);
  }

  // string name_of_message_descriptor = 3;
  if (this->name_of_message_descriptor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_of_message_descriptor().data(), static_cast<int>(this->_internal_name_of_message_descriptor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DifferentialService.DiffRequest.name_of_message_descriptor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name_of_message_descriptor(), target);
  }

  // repeated bytes file_descriptor_proto = 4;
  for (int i = 0, n = this->_internal_file_descriptor_proto_size(); i < n; i++) {
    const auto& s = this->_internal_file_descriptor_proto(i);
    target = stream->WriteBytes(4, s, target);
  }

  // .DifferentialService.IgnoreCriteria user_ignore = 5;
  if (this->has_user_ignore()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::user_ignore(this), target, stream);
  }

  // repeated .DifferentialService.RepeatedField repeated_field = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_repeated_field(i), target, stream);
  }

  // repeated .DifferentialService.MapCompare map_compare = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_map_compare_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_map_compare(i), target, stream);
  }

  // .DifferentialService.MapCompareNotSameIndex map_compare_not_same_index = 8;
  if (this->has_map_compare_not_same_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::map_compare_not_same_index(this), target, stream);
  }

  // .DifferentialService.FloatNumComparison float_num_comparison = 9;
  if (this->has_float_num_comparison()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::float_num_comparison(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DifferentialService.DiffRequest)
  return target;
}

size_t DiffRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DifferentialService.DiffRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes file_descriptor_proto = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(file_descriptor_proto_.size());
  for (int i = 0, n = file_descriptor_proto_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      file_descriptor_proto_.Get(i));
  }

  // repeated .DifferentialService.RepeatedField repeated_field = 6;
  total_size += 1UL * this->_internal_repeated_field_size();
  for (const auto& msg : this->repeated_field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DifferentialService.MapCompare map_compare = 7;
  total_size += 1UL * this->_internal_map_compare_size();
  for (const auto& msg : this->map_compare_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes first_message = 1;
  if (this->first_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_first_message());
  }

  // bytes second_message = 2;
  if (this->second_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_second_message());
  }

  // string name_of_message_descriptor = 3;
  if (this->name_of_message_descriptor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_of_message_descriptor());
  }

  // .DifferentialService.IgnoreCriteria user_ignore = 5;
  if (this->has_user_ignore()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_ignore_);
  }

  // .DifferentialService.MapCompareNotSameIndex map_compare_not_same_index = 8;
  if (this->has_map_compare_not_same_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_compare_not_same_index_);
  }

  // .DifferentialService.FloatNumComparison float_num_comparison = 9;
  if (this->has_float_num_comparison()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *float_num_comparison_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiffRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DifferentialService.DiffRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DiffRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiffRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DifferentialService.DiffRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DifferentialService.DiffRequest)
    MergeFrom(*source);
  }
}

void DiffRequest::MergeFrom(const DiffRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DifferentialService.DiffRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_descriptor_proto_.MergeFrom(from.file_descriptor_proto_);
  repeated_field_.MergeFrom(from.repeated_field_);
  map_compare_.MergeFrom(from.map_compare_);
  if (from.first_message().size() > 0) {

    first_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_message_);
  }
  if (from.second_message().size() > 0) {

    second_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.second_message_);
  }
  if (from.name_of_message_descriptor().size() > 0) {

    name_of_message_descriptor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_of_message_descriptor_);
  }
  if (from.has_user_ignore()) {
    _internal_mutable_user_ignore()->::DifferentialService::IgnoreCriteria::MergeFrom(from._internal_user_ignore());
  }
  if (from.has_map_compare_not_same_index()) {
    _internal_mutable_map_compare_not_same_index()->::DifferentialService::MapCompareNotSameIndex::MergeFrom(from._internal_map_compare_not_same_index());
  }
  if (from.has_float_num_comparison()) {
    _internal_mutable_float_num_comparison()->::DifferentialService::FloatNumComparison::MergeFrom(from._internal_float_num_comparison());
  }
}

void DiffRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DifferentialService.DiffRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiffRequest::CopyFrom(const DiffRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DifferentialService.DiffRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiffRequest::IsInitialized() const {
  return true;
}

void DiffRequest::InternalSwap(DiffRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_descriptor_proto_.InternalSwap(&other->file_descriptor_proto_);
  repeated_field_.InternalSwap(&other->repeated_field_);
  map_compare_.InternalSwap(&other->map_compare_);
  first_message_.Swap(&other->first_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  second_message_.Swap(&other->second_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_of_message_descriptor_.Swap(&other->name_of_message_descriptor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_ignore_, other->user_ignore_);
  swap(map_compare_not_same_index_, other->map_compare_not_same_index_);
  swap(float_num_comparison_, other->float_num_comparison_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiffRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiffResponse::InitAsDefaultInstance() {
}
class DiffResponse::_Internal {
 public:
};

DiffResponse::DiffResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DifferentialService.DiffResponse)
}
DiffResponse::DiffResponse(const DiffResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  // @@protoc_insertion_point(copy_constructor:DifferentialService.DiffResponse)
}

void DiffResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiffResponse_differential_5fservice_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiffResponse::~DiffResponse() {
  // @@protoc_insertion_point(destructor:DifferentialService.DiffResponse)
  SharedDtor();
}

void DiffResponse::SharedDtor() {
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiffResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiffResponse& DiffResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiffResponse_differential_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DiffResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DifferentialService.DiffResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DiffResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DifferentialService.DiffResponse.result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DifferentialService.DiffResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiffResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DifferentialService.DiffResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DifferentialService.DiffResponse.result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_result(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DifferentialService.DiffResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DifferentialService.DiffResponse)
  return target;
}

size_t DiffResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DifferentialService.DiffResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiffResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DifferentialService.DiffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DiffResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiffResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DifferentialService.DiffResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DifferentialService.DiffResponse)
    MergeFrom(*source);
  }
}

void DiffResponse::MergeFrom(const DiffResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DifferentialService.DiffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void DiffResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DifferentialService.DiffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiffResponse::CopyFrom(const DiffResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DifferentialService.DiffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiffResponse::IsInitialized() const {
  return true;
}

void DiffResponse::InternalSwap(DiffResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DiffResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DifferentialService
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DifferentialService::MsgRequest* Arena::CreateMaybeMessage< ::DifferentialService::MsgRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DifferentialService::MsgRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DifferentialService::MsgReply* Arena::CreateMaybeMessage< ::DifferentialService::MsgReply >(Arena* arena) {
  return Arena::CreateInternal< ::DifferentialService::MsgReply >(arena);
}
template<> PROTOBUF_NOINLINE ::DifferentialService::IgnoreCriteria* Arena::CreateMaybeMessage< ::DifferentialService::IgnoreCriteria >(Arena* arena) {
  return Arena::CreateInternal< ::DifferentialService::IgnoreCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::DifferentialService::RepeatedField* Arena::CreateMaybeMessage< ::DifferentialService::RepeatedField >(Arena* arena) {
  return Arena::CreateInternal< ::DifferentialService::RepeatedField >(arena);
}
template<> PROTOBUF_NOINLINE ::DifferentialService::MapCompare* Arena::CreateMaybeMessage< ::DifferentialService::MapCompare >(Arena* arena) {
  return Arena::CreateInternal< ::DifferentialService::MapCompare >(arena);
}
template<> PROTOBUF_NOINLINE ::DifferentialService::MapCompareNotSameIndex* Arena::CreateMaybeMessage< ::DifferentialService::MapCompareNotSameIndex >(Arena* arena) {
  return Arena::CreateInternal< ::DifferentialService::MapCompareNotSameIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::DifferentialService::FloatNumComparison* Arena::CreateMaybeMessage< ::DifferentialService::FloatNumComparison >(Arena* arena) {
  return Arena::CreateInternal< ::DifferentialService::FloatNumComparison >(arena);
}
template<> PROTOBUF_NOINLINE ::DifferentialService::DiffRequest* Arena::CreateMaybeMessage< ::DifferentialService::DiffRequest >(Arena* arena) {
  return Arena::CreateInternal< ::DifferentialService::DiffRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DifferentialService::DiffResponse* Arena::CreateMaybeMessage< ::DifferentialService::DiffResponse >(Arena* arena) {
  return Arena::CreateInternal< ::DifferentialService::DiffResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
