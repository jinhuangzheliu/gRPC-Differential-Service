// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: differential_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_differential_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_differential_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_differential_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_differential_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_differential_5fservice_2eproto;
namespace DifferentialService {
class DiffRequest;
class DiffRequestDefaultTypeInternal;
extern DiffRequestDefaultTypeInternal _DiffRequest_default_instance_;
class DiffResponse;
class DiffResponseDefaultTypeInternal;
extern DiffResponseDefaultTypeInternal _DiffResponse_default_instance_;
class FloatNumComparison;
class FloatNumComparisonDefaultTypeInternal;
extern FloatNumComparisonDefaultTypeInternal _FloatNumComparison_default_instance_;
class IgnoreCriteria;
class IgnoreCriteriaDefaultTypeInternal;
extern IgnoreCriteriaDefaultTypeInternal _IgnoreCriteria_default_instance_;
class MapCompare;
class MapCompareDefaultTypeInternal;
extern MapCompareDefaultTypeInternal _MapCompare_default_instance_;
class MapCompareNotSameIndex;
class MapCompareNotSameIndexDefaultTypeInternal;
extern MapCompareNotSameIndexDefaultTypeInternal _MapCompareNotSameIndex_default_instance_;
class MsgReply;
class MsgReplyDefaultTypeInternal;
extern MsgReplyDefaultTypeInternal _MsgReply_default_instance_;
class MsgRequest;
class MsgRequestDefaultTypeInternal;
extern MsgRequestDefaultTypeInternal _MsgRequest_default_instance_;
class RepeatedField;
class RepeatedFieldDefaultTypeInternal;
extern RepeatedFieldDefaultTypeInternal _RepeatedField_default_instance_;
}  // namespace DifferentialService
PROTOBUF_NAMESPACE_OPEN
template<> ::DifferentialService::DiffRequest* Arena::CreateMaybeMessage<::DifferentialService::DiffRequest>(Arena*);
template<> ::DifferentialService::DiffResponse* Arena::CreateMaybeMessage<::DifferentialService::DiffResponse>(Arena*);
template<> ::DifferentialService::FloatNumComparison* Arena::CreateMaybeMessage<::DifferentialService::FloatNumComparison>(Arena*);
template<> ::DifferentialService::IgnoreCriteria* Arena::CreateMaybeMessage<::DifferentialService::IgnoreCriteria>(Arena*);
template<> ::DifferentialService::MapCompare* Arena::CreateMaybeMessage<::DifferentialService::MapCompare>(Arena*);
template<> ::DifferentialService::MapCompareNotSameIndex* Arena::CreateMaybeMessage<::DifferentialService::MapCompareNotSameIndex>(Arena*);
template<> ::DifferentialService::MsgReply* Arena::CreateMaybeMessage<::DifferentialService::MsgReply>(Arena*);
template<> ::DifferentialService::MsgRequest* Arena::CreateMaybeMessage<::DifferentialService::MsgRequest>(Arena*);
template<> ::DifferentialService::RepeatedField* Arena::CreateMaybeMessage<::DifferentialService::RepeatedField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DifferentialService {

enum IgnoreCriteria_IgnoreFlag : int {
  IgnoreCriteria_IgnoreFlag_FLAG_IGNORE = 0,
  IgnoreCriteria_IgnoreFlag_FLAG_COMPARE = 1,
  IgnoreCriteria_IgnoreFlag_IgnoreCriteria_IgnoreFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IgnoreCriteria_IgnoreFlag_IgnoreCriteria_IgnoreFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IgnoreCriteria_IgnoreFlag_IsValid(int value);
constexpr IgnoreCriteria_IgnoreFlag IgnoreCriteria_IgnoreFlag_IgnoreFlag_MIN = IgnoreCriteria_IgnoreFlag_FLAG_IGNORE;
constexpr IgnoreCriteria_IgnoreFlag IgnoreCriteria_IgnoreFlag_IgnoreFlag_MAX = IgnoreCriteria_IgnoreFlag_FLAG_COMPARE;
constexpr int IgnoreCriteria_IgnoreFlag_IgnoreFlag_ARRAYSIZE = IgnoreCriteria_IgnoreFlag_IgnoreFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IgnoreCriteria_IgnoreFlag_descriptor();
template<typename T>
inline const std::string& IgnoreCriteria_IgnoreFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IgnoreCriteria_IgnoreFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IgnoreCriteria_IgnoreFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IgnoreCriteria_IgnoreFlag_descriptor(), enum_t_value);
}
inline bool IgnoreCriteria_IgnoreFlag_Parse(
    const std::string& name, IgnoreCriteria_IgnoreFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IgnoreCriteria_IgnoreFlag>(
    IgnoreCriteria_IgnoreFlag_descriptor(), name, value);
}
enum RepeatedField_TreatAsFlag : int {
  RepeatedField_TreatAsFlag_FLAG_LIST = 0,
  RepeatedField_TreatAsFlag_FLAG_SET = 1,
  RepeatedField_TreatAsFlag_RepeatedField_TreatAsFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RepeatedField_TreatAsFlag_RepeatedField_TreatAsFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RepeatedField_TreatAsFlag_IsValid(int value);
constexpr RepeatedField_TreatAsFlag RepeatedField_TreatAsFlag_TreatAsFlag_MIN = RepeatedField_TreatAsFlag_FLAG_LIST;
constexpr RepeatedField_TreatAsFlag RepeatedField_TreatAsFlag_TreatAsFlag_MAX = RepeatedField_TreatAsFlag_FLAG_SET;
constexpr int RepeatedField_TreatAsFlag_TreatAsFlag_ARRAYSIZE = RepeatedField_TreatAsFlag_TreatAsFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RepeatedField_TreatAsFlag_descriptor();
template<typename T>
inline const std::string& RepeatedField_TreatAsFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RepeatedField_TreatAsFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RepeatedField_TreatAsFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RepeatedField_TreatAsFlag_descriptor(), enum_t_value);
}
inline bool RepeatedField_TreatAsFlag_Parse(
    const std::string& name, RepeatedField_TreatAsFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RepeatedField_TreatAsFlag>(
    RepeatedField_TreatAsFlag_descriptor(), name, value);
}
// ===================================================================

class MsgRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialService.MsgRequest) */ {
 public:
  MsgRequest();
  virtual ~MsgRequest();

  MsgRequest(const MsgRequest& from);
  MsgRequest(MsgRequest&& from) noexcept
    : MsgRequest() {
    *this = ::std::move(from);
  }

  inline MsgRequest& operator=(const MsgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRequest& operator=(MsgRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgRequest* internal_default_instance() {
    return reinterpret_cast<const MsgRequest*>(
               &_MsgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgRequest& a, MsgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgRequest* New() const final {
    return CreateMaybeMessage<MsgRequest>(nullptr);
  }

  MsgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgRequest& from);
  void MergeFrom(const MsgRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialService.MsgRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // string request = 1;
  void clear_request();
  const std::string& request() const;
  void set_request(const std::string& value);
  void set_request(std::string&& value);
  void set_request(const char* value);
  void set_request(const char* value, size_t size);
  std::string* mutable_request();
  std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // @@protoc_insertion_point(class_scope:DifferentialService.MsgRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MsgReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialService.MsgReply) */ {
 public:
  MsgReply();
  virtual ~MsgReply();

  MsgReply(const MsgReply& from);
  MsgReply(MsgReply&& from) noexcept
    : MsgReply() {
    *this = ::std::move(from);
  }

  inline MsgReply& operator=(const MsgReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgReply& operator=(MsgReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgReply* internal_default_instance() {
    return reinterpret_cast<const MsgReply*>(
               &_MsgReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgReply& a, MsgReply& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgReply* New() const final {
    return CreateMaybeMessage<MsgReply>(nullptr);
  }

  MsgReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgReply& from);
  void MergeFrom(const MsgReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialService.MsgReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
  };
  // string reply = 1;
  void clear_reply();
  const std::string& reply() const;
  void set_reply(const std::string& value);
  void set_reply(std::string&& value);
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  std::string* mutable_reply();
  std::string* release_reply();
  void set_allocated_reply(std::string* reply);
  private:
  const std::string& _internal_reply() const;
  void _internal_set_reply(const std::string& value);
  std::string* _internal_mutable_reply();
  public:

  // @@protoc_insertion_point(class_scope:DifferentialService.MsgReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class IgnoreCriteria :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialService.IgnoreCriteria) */ {
 public:
  IgnoreCriteria();
  virtual ~IgnoreCriteria();

  IgnoreCriteria(const IgnoreCriteria& from);
  IgnoreCriteria(IgnoreCriteria&& from) noexcept
    : IgnoreCriteria() {
    *this = ::std::move(from);
  }

  inline IgnoreCriteria& operator=(const IgnoreCriteria& from) {
    CopyFrom(from);
    return *this;
  }
  inline IgnoreCriteria& operator=(IgnoreCriteria&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IgnoreCriteria& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IgnoreCriteria* internal_default_instance() {
    return reinterpret_cast<const IgnoreCriteria*>(
               &_IgnoreCriteria_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IgnoreCriteria& a, IgnoreCriteria& b) {
    a.Swap(&b);
  }
  inline void Swap(IgnoreCriteria* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IgnoreCriteria* New() const final {
    return CreateMaybeMessage<IgnoreCriteria>(nullptr);
  }

  IgnoreCriteria* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IgnoreCriteria>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IgnoreCriteria& from);
  void MergeFrom(const IgnoreCriteria& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IgnoreCriteria* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialService.IgnoreCriteria";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef IgnoreCriteria_IgnoreFlag IgnoreFlag;
  static constexpr IgnoreFlag FLAG_IGNORE =
    IgnoreCriteria_IgnoreFlag_FLAG_IGNORE;
  static constexpr IgnoreFlag FLAG_COMPARE =
    IgnoreCriteria_IgnoreFlag_FLAG_COMPARE;
  static inline bool IgnoreFlag_IsValid(int value) {
    return IgnoreCriteria_IgnoreFlag_IsValid(value);
  }
  static constexpr IgnoreFlag IgnoreFlag_MIN =
    IgnoreCriteria_IgnoreFlag_IgnoreFlag_MIN;
  static constexpr IgnoreFlag IgnoreFlag_MAX =
    IgnoreCriteria_IgnoreFlag_IgnoreFlag_MAX;
  static constexpr int IgnoreFlag_ARRAYSIZE =
    IgnoreCriteria_IgnoreFlag_IgnoreFlag_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  IgnoreFlag_descriptor() {
    return IgnoreCriteria_IgnoreFlag_descriptor();
  }
  template<typename T>
  static inline const std::string& IgnoreFlag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IgnoreFlag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IgnoreFlag_Name.");
    return IgnoreCriteria_IgnoreFlag_Name(enum_t_value);
  }
  static inline bool IgnoreFlag_Parse(const std::string& name,
      IgnoreFlag* value) {
    return IgnoreCriteria_IgnoreFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreFieldsListFieldNumber = 2,
    kRegexFieldNumber = 3,
    kFlagFieldNumber = 1,
  };
  // repeated string ignore_fields_list = 2;
  int ignore_fields_list_size() const;
  private:
  int _internal_ignore_fields_list_size() const;
  public:
  void clear_ignore_fields_list();
  const std::string& ignore_fields_list(int index) const;
  std::string* mutable_ignore_fields_list(int index);
  void set_ignore_fields_list(int index, const std::string& value);
  void set_ignore_fields_list(int index, std::string&& value);
  void set_ignore_fields_list(int index, const char* value);
  void set_ignore_fields_list(int index, const char* value, size_t size);
  std::string* add_ignore_fields_list();
  void add_ignore_fields_list(const std::string& value);
  void add_ignore_fields_list(std::string&& value);
  void add_ignore_fields_list(const char* value);
  void add_ignore_fields_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ignore_fields_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ignore_fields_list();
  private:
  const std::string& _internal_ignore_fields_list(int index) const;
  std::string* _internal_add_ignore_fields_list();
  public:

  // string regex = 3;
  void clear_regex();
  const std::string& regex() const;
  void set_regex(const std::string& value);
  void set_regex(std::string&& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  std::string* mutable_regex();
  std::string* release_regex();
  void set_allocated_regex(std::string* regex);
  private:
  const std::string& _internal_regex() const;
  void _internal_set_regex(const std::string& value);
  std::string* _internal_mutable_regex();
  public:

  // .DifferentialService.IgnoreCriteria.IgnoreFlag flag = 1;
  void clear_flag();
  ::DifferentialService::IgnoreCriteria_IgnoreFlag flag() const;
  void set_flag(::DifferentialService::IgnoreCriteria_IgnoreFlag value);
  private:
  ::DifferentialService::IgnoreCriteria_IgnoreFlag _internal_flag() const;
  void _internal_set_flag(::DifferentialService::IgnoreCriteria_IgnoreFlag value);
  public:

  // @@protoc_insertion_point(class_scope:DifferentialService.IgnoreCriteria)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ignore_fields_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  int flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RepeatedField :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialService.RepeatedField) */ {
 public:
  RepeatedField();
  virtual ~RepeatedField();

  RepeatedField(const RepeatedField& from);
  RepeatedField(RepeatedField&& from) noexcept
    : RepeatedField() {
    *this = ::std::move(from);
  }

  inline RepeatedField& operator=(const RepeatedField& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedField& operator=(RepeatedField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RepeatedField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedField* internal_default_instance() {
    return reinterpret_cast<const RepeatedField*>(
               &_RepeatedField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RepeatedField& a, RepeatedField& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedField* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedField* New() const final {
    return CreateMaybeMessage<RepeatedField>(nullptr);
  }

  RepeatedField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RepeatedField& from);
  void MergeFrom(const RepeatedField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialService.RepeatedField";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RepeatedField_TreatAsFlag TreatAsFlag;
  static constexpr TreatAsFlag FLAG_LIST =
    RepeatedField_TreatAsFlag_FLAG_LIST;
  static constexpr TreatAsFlag FLAG_SET =
    RepeatedField_TreatAsFlag_FLAG_SET;
  static inline bool TreatAsFlag_IsValid(int value) {
    return RepeatedField_TreatAsFlag_IsValid(value);
  }
  static constexpr TreatAsFlag TreatAsFlag_MIN =
    RepeatedField_TreatAsFlag_TreatAsFlag_MIN;
  static constexpr TreatAsFlag TreatAsFlag_MAX =
    RepeatedField_TreatAsFlag_TreatAsFlag_MAX;
  static constexpr int TreatAsFlag_ARRAYSIZE =
    RepeatedField_TreatAsFlag_TreatAsFlag_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TreatAsFlag_descriptor() {
    return RepeatedField_TreatAsFlag_descriptor();
  }
  template<typename T>
  static inline const std::string& TreatAsFlag_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TreatAsFlag>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TreatAsFlag_Name.");
    return RepeatedField_TreatAsFlag_Name(enum_t_value);
  }
  static inline bool TreatAsFlag_Parse(const std::string& name,
      TreatAsFlag* value) {
    return RepeatedField_TreatAsFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 2,
    kFlagFieldNumber = 1,
  };
  // string field_name = 2;
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // .DifferentialService.RepeatedField.TreatAsFlag flag = 1;
  void clear_flag();
  ::DifferentialService::RepeatedField_TreatAsFlag flag() const;
  void set_flag(::DifferentialService::RepeatedField_TreatAsFlag value);
  private:
  ::DifferentialService::RepeatedField_TreatAsFlag _internal_flag() const;
  void _internal_set_flag(::DifferentialService::RepeatedField_TreatAsFlag value);
  public:

  // @@protoc_insertion_point(class_scope:DifferentialService.RepeatedField)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  int flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MapCompare :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialService.MapCompare) */ {
 public:
  MapCompare();
  virtual ~MapCompare();

  MapCompare(const MapCompare& from);
  MapCompare(MapCompare&& from) noexcept
    : MapCompare() {
    *this = ::std::move(from);
  }

  inline MapCompare& operator=(const MapCompare& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapCompare& operator=(MapCompare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapCompare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapCompare* internal_default_instance() {
    return reinterpret_cast<const MapCompare*>(
               &_MapCompare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MapCompare& a, MapCompare& b) {
    a.Swap(&b);
  }
  inline void Swap(MapCompare* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapCompare* New() const final {
    return CreateMaybeMessage<MapCompare>(nullptr);
  }

  MapCompare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapCompare>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapCompare& from);
  void MergeFrom(const MapCompare& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapCompare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialService.MapCompare";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldFieldNumber = 2,
    kRepeatedFieldFieldNumber = 1,
  };
  // repeated string key_field = 2;
  int key_field_size() const;
  private:
  int _internal_key_field_size() const;
  public:
  void clear_key_field();
  const std::string& key_field(int index) const;
  std::string* mutable_key_field(int index);
  void set_key_field(int index, const std::string& value);
  void set_key_field(int index, std::string&& value);
  void set_key_field(int index, const char* value);
  void set_key_field(int index, const char* value, size_t size);
  std::string* add_key_field();
  void add_key_field(const std::string& value);
  void add_key_field(std::string&& value);
  void add_key_field(const char* value);
  void add_key_field(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& key_field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_key_field();
  private:
  const std::string& _internal_key_field(int index) const;
  std::string* _internal_add_key_field();
  public:

  // string repeated_field = 1;
  void clear_repeated_field();
  const std::string& repeated_field() const;
  void set_repeated_field(const std::string& value);
  void set_repeated_field(std::string&& value);
  void set_repeated_field(const char* value);
  void set_repeated_field(const char* value, size_t size);
  std::string* mutable_repeated_field();
  std::string* release_repeated_field();
  void set_allocated_repeated_field(std::string* repeated_field);
  private:
  const std::string& _internal_repeated_field() const;
  void _internal_set_repeated_field(const std::string& value);
  std::string* _internal_mutable_repeated_field();
  public:

  // @@protoc_insertion_point(class_scope:DifferentialService.MapCompare)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> key_field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repeated_field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MapCompareNotSameIndex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialService.MapCompareNotSameIndex) */ {
 public:
  MapCompareNotSameIndex();
  virtual ~MapCompareNotSameIndex();

  MapCompareNotSameIndex(const MapCompareNotSameIndex& from);
  MapCompareNotSameIndex(MapCompareNotSameIndex&& from) noexcept
    : MapCompareNotSameIndex() {
    *this = ::std::move(from);
  }

  inline MapCompareNotSameIndex& operator=(const MapCompareNotSameIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapCompareNotSameIndex& operator=(MapCompareNotSameIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapCompareNotSameIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapCompareNotSameIndex* internal_default_instance() {
    return reinterpret_cast<const MapCompareNotSameIndex*>(
               &_MapCompareNotSameIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MapCompareNotSameIndex& a, MapCompareNotSameIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(MapCompareNotSameIndex* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapCompareNotSameIndex* New() const final {
    return CreateMaybeMessage<MapCompareNotSameIndex>(nullptr);
  }

  MapCompareNotSameIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapCompareNotSameIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapCompareNotSameIndex& from);
  void MergeFrom(const MapCompareNotSameIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapCompareNotSameIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialService.MapCompareNotSameIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedFieldFieldNumber = 1,
    kFirstKeyFieldFieldNumber = 2,
    kSecondKeyFieldFieldNumber = 3,
  };
  // string repeated_field = 1;
  void clear_repeated_field();
  const std::string& repeated_field() const;
  void set_repeated_field(const std::string& value);
  void set_repeated_field(std::string&& value);
  void set_repeated_field(const char* value);
  void set_repeated_field(const char* value, size_t size);
  std::string* mutable_repeated_field();
  std::string* release_repeated_field();
  void set_allocated_repeated_field(std::string* repeated_field);
  private:
  const std::string& _internal_repeated_field() const;
  void _internal_set_repeated_field(const std::string& value);
  std::string* _internal_mutable_repeated_field();
  public:

  // string first_key_field = 2;
  void clear_first_key_field();
  const std::string& first_key_field() const;
  void set_first_key_field(const std::string& value);
  void set_first_key_field(std::string&& value);
  void set_first_key_field(const char* value);
  void set_first_key_field(const char* value, size_t size);
  std::string* mutable_first_key_field();
  std::string* release_first_key_field();
  void set_allocated_first_key_field(std::string* first_key_field);
  private:
  const std::string& _internal_first_key_field() const;
  void _internal_set_first_key_field(const std::string& value);
  std::string* _internal_mutable_first_key_field();
  public:

  // string second_key_field = 3;
  void clear_second_key_field();
  const std::string& second_key_field() const;
  void set_second_key_field(const std::string& value);
  void set_second_key_field(std::string&& value);
  void set_second_key_field(const char* value);
  void set_second_key_field(const char* value, size_t size);
  std::string* mutable_second_key_field();
  std::string* release_second_key_field();
  void set_allocated_second_key_field(std::string* second_key_field);
  private:
  const std::string& _internal_second_key_field() const;
  void _internal_set_second_key_field(const std::string& value);
  std::string* _internal_mutable_second_key_field();
  public:

  // @@protoc_insertion_point(class_scope:DifferentialService.MapCompareNotSameIndex)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repeated_field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_key_field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr second_key_field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FloatNumComparison :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialService.FloatNumComparison) */ {
 public:
  FloatNumComparison();
  virtual ~FloatNumComparison();

  FloatNumComparison(const FloatNumComparison& from);
  FloatNumComparison(FloatNumComparison&& from) noexcept
    : FloatNumComparison() {
    *this = ::std::move(from);
  }

  inline FloatNumComparison& operator=(const FloatNumComparison& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatNumComparison& operator=(FloatNumComparison&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatNumComparison& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatNumComparison* internal_default_instance() {
    return reinterpret_cast<const FloatNumComparison*>(
               &_FloatNumComparison_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FloatNumComparison& a, FloatNumComparison& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatNumComparison* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatNumComparison* New() const final {
    return CreateMaybeMessage<FloatNumComparison>(nullptr);
  }

  FloatNumComparison* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatNumComparison>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatNumComparison& from);
  void MergeFrom(const FloatNumComparison& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatNumComparison* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialService.FloatNumComparison";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFractionFieldNumber = 1,
    kMarginFieldNumber = 2,
  };
  // double fraction = 1;
  void clear_fraction();
  double fraction() const;
  void set_fraction(double value);
  private:
  double _internal_fraction() const;
  void _internal_set_fraction(double value);
  public:

  // double margin = 2;
  void clear_margin();
  double margin() const;
  void set_margin(double value);
  private:
  double _internal_margin() const;
  void _internal_set_margin(double value);
  public:

  // @@protoc_insertion_point(class_scope:DifferentialService.FloatNumComparison)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double fraction_;
  double margin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DiffRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialService.DiffRequest) */ {
 public:
  DiffRequest();
  virtual ~DiffRequest();

  DiffRequest(const DiffRequest& from);
  DiffRequest(DiffRequest&& from) noexcept
    : DiffRequest() {
    *this = ::std::move(from);
  }

  inline DiffRequest& operator=(const DiffRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiffRequest& operator=(DiffRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiffRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiffRequest* internal_default_instance() {
    return reinterpret_cast<const DiffRequest*>(
               &_DiffRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DiffRequest& a, DiffRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DiffRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiffRequest* New() const final {
    return CreateMaybeMessage<DiffRequest>(nullptr);
  }

  DiffRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiffRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiffRequest& from);
  void MergeFrom(const DiffRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiffRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialService.DiffRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileDescriptorProtoFieldNumber = 4,
    kRepeatedFieldFieldNumber = 6,
    kMapCompareFieldNumber = 7,
    kFirstMessageFieldNumber = 1,
    kSecondMessageFieldNumber = 2,
    kNameOfMessageDescriptorFieldNumber = 3,
    kUserIgnoreFieldNumber = 5,
    kMapCompareNotSameIndexFieldNumber = 8,
    kFloatNumComparisonFieldNumber = 9,
  };
  // repeated bytes file_descriptor_proto = 4;
  int file_descriptor_proto_size() const;
  private:
  int _internal_file_descriptor_proto_size() const;
  public:
  void clear_file_descriptor_proto();
  const std::string& file_descriptor_proto(int index) const;
  std::string* mutable_file_descriptor_proto(int index);
  void set_file_descriptor_proto(int index, const std::string& value);
  void set_file_descriptor_proto(int index, std::string&& value);
  void set_file_descriptor_proto(int index, const char* value);
  void set_file_descriptor_proto(int index, const void* value, size_t size);
  std::string* add_file_descriptor_proto();
  void add_file_descriptor_proto(const std::string& value);
  void add_file_descriptor_proto(std::string&& value);
  void add_file_descriptor_proto(const char* value);
  void add_file_descriptor_proto(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_descriptor_proto() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_descriptor_proto();
  private:
  const std::string& _internal_file_descriptor_proto(int index) const;
  std::string* _internal_add_file_descriptor_proto();
  public:

  // repeated .DifferentialService.RepeatedField repeated_field = 6;
  int repeated_field_size() const;
  private:
  int _internal_repeated_field_size() const;
  public:
  void clear_repeated_field();
  ::DifferentialService::RepeatedField* mutable_repeated_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialService::RepeatedField >*
      mutable_repeated_field();
  private:
  const ::DifferentialService::RepeatedField& _internal_repeated_field(int index) const;
  ::DifferentialService::RepeatedField* _internal_add_repeated_field();
  public:
  const ::DifferentialService::RepeatedField& repeated_field(int index) const;
  ::DifferentialService::RepeatedField* add_repeated_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialService::RepeatedField >&
      repeated_field() const;

  // repeated .DifferentialService.MapCompare map_compare = 7;
  int map_compare_size() const;
  private:
  int _internal_map_compare_size() const;
  public:
  void clear_map_compare();
  ::DifferentialService::MapCompare* mutable_map_compare(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialService::MapCompare >*
      mutable_map_compare();
  private:
  const ::DifferentialService::MapCompare& _internal_map_compare(int index) const;
  ::DifferentialService::MapCompare* _internal_add_map_compare();
  public:
  const ::DifferentialService::MapCompare& map_compare(int index) const;
  ::DifferentialService::MapCompare* add_map_compare();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialService::MapCompare >&
      map_compare() const;

  // bytes first_message = 1;
  void clear_first_message();
  const std::string& first_message() const;
  void set_first_message(const std::string& value);
  void set_first_message(std::string&& value);
  void set_first_message(const char* value);
  void set_first_message(const void* value, size_t size);
  std::string* mutable_first_message();
  std::string* release_first_message();
  void set_allocated_first_message(std::string* first_message);
  private:
  const std::string& _internal_first_message() const;
  void _internal_set_first_message(const std::string& value);
  std::string* _internal_mutable_first_message();
  public:

  // bytes second_message = 2;
  void clear_second_message();
  const std::string& second_message() const;
  void set_second_message(const std::string& value);
  void set_second_message(std::string&& value);
  void set_second_message(const char* value);
  void set_second_message(const void* value, size_t size);
  std::string* mutable_second_message();
  std::string* release_second_message();
  void set_allocated_second_message(std::string* second_message);
  private:
  const std::string& _internal_second_message() const;
  void _internal_set_second_message(const std::string& value);
  std::string* _internal_mutable_second_message();
  public:

  // string name_of_message_descriptor = 3;
  void clear_name_of_message_descriptor();
  const std::string& name_of_message_descriptor() const;
  void set_name_of_message_descriptor(const std::string& value);
  void set_name_of_message_descriptor(std::string&& value);
  void set_name_of_message_descriptor(const char* value);
  void set_name_of_message_descriptor(const char* value, size_t size);
  std::string* mutable_name_of_message_descriptor();
  std::string* release_name_of_message_descriptor();
  void set_allocated_name_of_message_descriptor(std::string* name_of_message_descriptor);
  private:
  const std::string& _internal_name_of_message_descriptor() const;
  void _internal_set_name_of_message_descriptor(const std::string& value);
  std::string* _internal_mutable_name_of_message_descriptor();
  public:

  // .DifferentialService.IgnoreCriteria user_ignore = 5;
  bool has_user_ignore() const;
  private:
  bool _internal_has_user_ignore() const;
  public:
  void clear_user_ignore();
  const ::DifferentialService::IgnoreCriteria& user_ignore() const;
  ::DifferentialService::IgnoreCriteria* release_user_ignore();
  ::DifferentialService::IgnoreCriteria* mutable_user_ignore();
  void set_allocated_user_ignore(::DifferentialService::IgnoreCriteria* user_ignore);
  private:
  const ::DifferentialService::IgnoreCriteria& _internal_user_ignore() const;
  ::DifferentialService::IgnoreCriteria* _internal_mutable_user_ignore();
  public:

  // .DifferentialService.MapCompareNotSameIndex map_compare_not_same_index = 8;
  bool has_map_compare_not_same_index() const;
  private:
  bool _internal_has_map_compare_not_same_index() const;
  public:
  void clear_map_compare_not_same_index();
  const ::DifferentialService::MapCompareNotSameIndex& map_compare_not_same_index() const;
  ::DifferentialService::MapCompareNotSameIndex* release_map_compare_not_same_index();
  ::DifferentialService::MapCompareNotSameIndex* mutable_map_compare_not_same_index();
  void set_allocated_map_compare_not_same_index(::DifferentialService::MapCompareNotSameIndex* map_compare_not_same_index);
  private:
  const ::DifferentialService::MapCompareNotSameIndex& _internal_map_compare_not_same_index() const;
  ::DifferentialService::MapCompareNotSameIndex* _internal_mutable_map_compare_not_same_index();
  public:

  // .DifferentialService.FloatNumComparison float_num_comparison = 9;
  bool has_float_num_comparison() const;
  private:
  bool _internal_has_float_num_comparison() const;
  public:
  void clear_float_num_comparison();
  const ::DifferentialService::FloatNumComparison& float_num_comparison() const;
  ::DifferentialService::FloatNumComparison* release_float_num_comparison();
  ::DifferentialService::FloatNumComparison* mutable_float_num_comparison();
  void set_allocated_float_num_comparison(::DifferentialService::FloatNumComparison* float_num_comparison);
  private:
  const ::DifferentialService::FloatNumComparison& _internal_float_num_comparison() const;
  ::DifferentialService::FloatNumComparison* _internal_mutable_float_num_comparison();
  public:

  // @@protoc_insertion_point(class_scope:DifferentialService.DiffRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_descriptor_proto_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialService::RepeatedField > repeated_field_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialService::MapCompare > map_compare_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr second_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_of_message_descriptor_;
  ::DifferentialService::IgnoreCriteria* user_ignore_;
  ::DifferentialService::MapCompareNotSameIndex* map_compare_not_same_index_;
  ::DifferentialService::FloatNumComparison* float_num_comparison_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DiffResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialService.DiffResponse) */ {
 public:
  DiffResponse();
  virtual ~DiffResponse();

  DiffResponse(const DiffResponse& from);
  DiffResponse(DiffResponse&& from) noexcept
    : DiffResponse() {
    *this = ::std::move(from);
  }

  inline DiffResponse& operator=(const DiffResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiffResponse& operator=(DiffResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiffResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiffResponse* internal_default_instance() {
    return reinterpret_cast<const DiffResponse*>(
               &_DiffResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DiffResponse& a, DiffResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DiffResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiffResponse* New() const final {
    return CreateMaybeMessage<DiffResponse>(nullptr);
  }

  DiffResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiffResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiffResponse& from);
  void MergeFrom(const DiffResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiffResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialService.DiffResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5fservice_2eproto);
    return ::descriptor_table_differential_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:DifferentialService.DiffResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgRequest

// string request = 1;
inline void MsgRequest::clear_request() {
  request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MsgRequest::request() const {
  // @@protoc_insertion_point(field_get:DifferentialService.MsgRequest.request)
  return _internal_request();
}
inline void MsgRequest::set_request(const std::string& value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:DifferentialService.MsgRequest.request)
}
inline std::string* MsgRequest::mutable_request() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.MsgRequest.request)
  return _internal_mutable_request();
}
inline const std::string& MsgRequest::_internal_request() const {
  return request_.GetNoArena();
}
inline void MsgRequest::_internal_set_request(const std::string& value) {
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MsgRequest::set_request(std::string&& value) {
  
  request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialService.MsgRequest.request)
}
inline void MsgRequest::set_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialService.MsgRequest.request)
}
inline void MsgRequest::set_request(const char* value, size_t size) {
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.MsgRequest.request)
}
inline std::string* MsgRequest::_internal_mutable_request() {
  
  return request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgRequest::release_request() {
  // @@protoc_insertion_point(field_release:DifferentialService.MsgRequest.request)
  
  return request_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgRequest::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    
  } else {
    
  }
  request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.MsgRequest.request)
}

// -------------------------------------------------------------------

// MsgReply

// string reply = 1;
inline void MsgReply::clear_reply() {
  reply_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MsgReply::reply() const {
  // @@protoc_insertion_point(field_get:DifferentialService.MsgReply.reply)
  return _internal_reply();
}
inline void MsgReply::set_reply(const std::string& value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:DifferentialService.MsgReply.reply)
}
inline std::string* MsgReply::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.MsgReply.reply)
  return _internal_mutable_reply();
}
inline const std::string& MsgReply::_internal_reply() const {
  return reply_.GetNoArena();
}
inline void MsgReply::_internal_set_reply(const std::string& value) {
  
  reply_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MsgReply::set_reply(std::string&& value) {
  
  reply_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialService.MsgReply.reply)
}
inline void MsgReply::set_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reply_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialService.MsgReply.reply)
}
inline void MsgReply::set_reply(const char* value, size_t size) {
  
  reply_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.MsgReply.reply)
}
inline std::string* MsgReply::_internal_mutable_reply() {
  
  return reply_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MsgReply::release_reply() {
  // @@protoc_insertion_point(field_release:DifferentialService.MsgReply.reply)
  
  return reply_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MsgReply::set_allocated_reply(std::string* reply) {
  if (reply != nullptr) {
    
  } else {
    
  }
  reply_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply);
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.MsgReply.reply)
}

// -------------------------------------------------------------------

// IgnoreCriteria

// .DifferentialService.IgnoreCriteria.IgnoreFlag flag = 1;
inline void IgnoreCriteria::clear_flag() {
  flag_ = 0;
}
inline ::DifferentialService::IgnoreCriteria_IgnoreFlag IgnoreCriteria::_internal_flag() const {
  return static_cast< ::DifferentialService::IgnoreCriteria_IgnoreFlag >(flag_);
}
inline ::DifferentialService::IgnoreCriteria_IgnoreFlag IgnoreCriteria::flag() const {
  // @@protoc_insertion_point(field_get:DifferentialService.IgnoreCriteria.flag)
  return _internal_flag();
}
inline void IgnoreCriteria::_internal_set_flag(::DifferentialService::IgnoreCriteria_IgnoreFlag value) {
  
  flag_ = value;
}
inline void IgnoreCriteria::set_flag(::DifferentialService::IgnoreCriteria_IgnoreFlag value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:DifferentialService.IgnoreCriteria.flag)
}

// repeated string ignore_fields_list = 2;
inline int IgnoreCriteria::_internal_ignore_fields_list_size() const {
  return ignore_fields_list_.size();
}
inline int IgnoreCriteria::ignore_fields_list_size() const {
  return _internal_ignore_fields_list_size();
}
inline void IgnoreCriteria::clear_ignore_fields_list() {
  ignore_fields_list_.Clear();
}
inline std::string* IgnoreCriteria::add_ignore_fields_list() {
  // @@protoc_insertion_point(field_add_mutable:DifferentialService.IgnoreCriteria.ignore_fields_list)
  return _internal_add_ignore_fields_list();
}
inline const std::string& IgnoreCriteria::_internal_ignore_fields_list(int index) const {
  return ignore_fields_list_.Get(index);
}
inline const std::string& IgnoreCriteria::ignore_fields_list(int index) const {
  // @@protoc_insertion_point(field_get:DifferentialService.IgnoreCriteria.ignore_fields_list)
  return _internal_ignore_fields_list(index);
}
inline std::string* IgnoreCriteria::mutable_ignore_fields_list(int index) {
  // @@protoc_insertion_point(field_mutable:DifferentialService.IgnoreCriteria.ignore_fields_list)
  return ignore_fields_list_.Mutable(index);
}
inline void IgnoreCriteria::set_ignore_fields_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:DifferentialService.IgnoreCriteria.ignore_fields_list)
  ignore_fields_list_.Mutable(index)->assign(value);
}
inline void IgnoreCriteria::set_ignore_fields_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:DifferentialService.IgnoreCriteria.ignore_fields_list)
  ignore_fields_list_.Mutable(index)->assign(std::move(value));
}
inline void IgnoreCriteria::set_ignore_fields_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ignore_fields_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DifferentialService.IgnoreCriteria.ignore_fields_list)
}
inline void IgnoreCriteria::set_ignore_fields_list(int index, const char* value, size_t size) {
  ignore_fields_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.IgnoreCriteria.ignore_fields_list)
}
inline std::string* IgnoreCriteria::_internal_add_ignore_fields_list() {
  return ignore_fields_list_.Add();
}
inline void IgnoreCriteria::add_ignore_fields_list(const std::string& value) {
  ignore_fields_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DifferentialService.IgnoreCriteria.ignore_fields_list)
}
inline void IgnoreCriteria::add_ignore_fields_list(std::string&& value) {
  ignore_fields_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DifferentialService.IgnoreCriteria.ignore_fields_list)
}
inline void IgnoreCriteria::add_ignore_fields_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ignore_fields_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DifferentialService.IgnoreCriteria.ignore_fields_list)
}
inline void IgnoreCriteria::add_ignore_fields_list(const char* value, size_t size) {
  ignore_fields_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DifferentialService.IgnoreCriteria.ignore_fields_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IgnoreCriteria::ignore_fields_list() const {
  // @@protoc_insertion_point(field_list:DifferentialService.IgnoreCriteria.ignore_fields_list)
  return ignore_fields_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IgnoreCriteria::mutable_ignore_fields_list() {
  // @@protoc_insertion_point(field_mutable_list:DifferentialService.IgnoreCriteria.ignore_fields_list)
  return &ignore_fields_list_;
}

// string regex = 3;
inline void IgnoreCriteria::clear_regex() {
  regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& IgnoreCriteria::regex() const {
  // @@protoc_insertion_point(field_get:DifferentialService.IgnoreCriteria.regex)
  return _internal_regex();
}
inline void IgnoreCriteria::set_regex(const std::string& value) {
  _internal_set_regex(value);
  // @@protoc_insertion_point(field_set:DifferentialService.IgnoreCriteria.regex)
}
inline std::string* IgnoreCriteria::mutable_regex() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.IgnoreCriteria.regex)
  return _internal_mutable_regex();
}
inline const std::string& IgnoreCriteria::_internal_regex() const {
  return regex_.GetNoArena();
}
inline void IgnoreCriteria::_internal_set_regex(const std::string& value) {
  
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void IgnoreCriteria::set_regex(std::string&& value) {
  
  regex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialService.IgnoreCriteria.regex)
}
inline void IgnoreCriteria::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialService.IgnoreCriteria.regex)
}
inline void IgnoreCriteria::set_regex(const char* value, size_t size) {
  
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.IgnoreCriteria.regex)
}
inline std::string* IgnoreCriteria::_internal_mutable_regex() {
  
  return regex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IgnoreCriteria::release_regex() {
  // @@protoc_insertion_point(field_release:DifferentialService.IgnoreCriteria.regex)
  
  return regex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IgnoreCriteria::set_allocated_regex(std::string* regex) {
  if (regex != nullptr) {
    
  } else {
    
  }
  regex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regex);
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.IgnoreCriteria.regex)
}

// -------------------------------------------------------------------

// RepeatedField

// .DifferentialService.RepeatedField.TreatAsFlag flag = 1;
inline void RepeatedField::clear_flag() {
  flag_ = 0;
}
inline ::DifferentialService::RepeatedField_TreatAsFlag RepeatedField::_internal_flag() const {
  return static_cast< ::DifferentialService::RepeatedField_TreatAsFlag >(flag_);
}
inline ::DifferentialService::RepeatedField_TreatAsFlag RepeatedField::flag() const {
  // @@protoc_insertion_point(field_get:DifferentialService.RepeatedField.flag)
  return _internal_flag();
}
inline void RepeatedField::_internal_set_flag(::DifferentialService::RepeatedField_TreatAsFlag value) {
  
  flag_ = value;
}
inline void RepeatedField::set_flag(::DifferentialService::RepeatedField_TreatAsFlag value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:DifferentialService.RepeatedField.flag)
}

// string field_name = 2;
inline void RepeatedField::clear_field_name() {
  field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RepeatedField::field_name() const {
  // @@protoc_insertion_point(field_get:DifferentialService.RepeatedField.field_name)
  return _internal_field_name();
}
inline void RepeatedField::set_field_name(const std::string& value) {
  _internal_set_field_name(value);
  // @@protoc_insertion_point(field_set:DifferentialService.RepeatedField.field_name)
}
inline std::string* RepeatedField::mutable_field_name() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.RepeatedField.field_name)
  return _internal_mutable_field_name();
}
inline const std::string& RepeatedField::_internal_field_name() const {
  return field_name_.GetNoArena();
}
inline void RepeatedField::_internal_set_field_name(const std::string& value) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RepeatedField::set_field_name(std::string&& value) {
  
  field_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialService.RepeatedField.field_name)
}
inline void RepeatedField::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialService.RepeatedField.field_name)
}
inline void RepeatedField::set_field_name(const char* value, size_t size) {
  
  field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.RepeatedField.field_name)
}
inline std::string* RepeatedField::_internal_mutable_field_name() {
  
  return field_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RepeatedField::release_field_name() {
  // @@protoc_insertion_point(field_release:DifferentialService.RepeatedField.field_name)
  
  return field_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RepeatedField::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name);
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.RepeatedField.field_name)
}

// -------------------------------------------------------------------

// MapCompare

// string repeated_field = 1;
inline void MapCompare::clear_repeated_field() {
  repeated_field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MapCompare::repeated_field() const {
  // @@protoc_insertion_point(field_get:DifferentialService.MapCompare.repeated_field)
  return _internal_repeated_field();
}
inline void MapCompare::set_repeated_field(const std::string& value) {
  _internal_set_repeated_field(value);
  // @@protoc_insertion_point(field_set:DifferentialService.MapCompare.repeated_field)
}
inline std::string* MapCompare::mutable_repeated_field() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.MapCompare.repeated_field)
  return _internal_mutable_repeated_field();
}
inline const std::string& MapCompare::_internal_repeated_field() const {
  return repeated_field_.GetNoArena();
}
inline void MapCompare::_internal_set_repeated_field(const std::string& value) {
  
  repeated_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MapCompare::set_repeated_field(std::string&& value) {
  
  repeated_field_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialService.MapCompare.repeated_field)
}
inline void MapCompare::set_repeated_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repeated_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialService.MapCompare.repeated_field)
}
inline void MapCompare::set_repeated_field(const char* value, size_t size) {
  
  repeated_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.MapCompare.repeated_field)
}
inline std::string* MapCompare::_internal_mutable_repeated_field() {
  
  return repeated_field_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MapCompare::release_repeated_field() {
  // @@protoc_insertion_point(field_release:DifferentialService.MapCompare.repeated_field)
  
  return repeated_field_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MapCompare::set_allocated_repeated_field(std::string* repeated_field) {
  if (repeated_field != nullptr) {
    
  } else {
    
  }
  repeated_field_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repeated_field);
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.MapCompare.repeated_field)
}

// repeated string key_field = 2;
inline int MapCompare::_internal_key_field_size() const {
  return key_field_.size();
}
inline int MapCompare::key_field_size() const {
  return _internal_key_field_size();
}
inline void MapCompare::clear_key_field() {
  key_field_.Clear();
}
inline std::string* MapCompare::add_key_field() {
  // @@protoc_insertion_point(field_add_mutable:DifferentialService.MapCompare.key_field)
  return _internal_add_key_field();
}
inline const std::string& MapCompare::_internal_key_field(int index) const {
  return key_field_.Get(index);
}
inline const std::string& MapCompare::key_field(int index) const {
  // @@protoc_insertion_point(field_get:DifferentialService.MapCompare.key_field)
  return _internal_key_field(index);
}
inline std::string* MapCompare::mutable_key_field(int index) {
  // @@protoc_insertion_point(field_mutable:DifferentialService.MapCompare.key_field)
  return key_field_.Mutable(index);
}
inline void MapCompare::set_key_field(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:DifferentialService.MapCompare.key_field)
  key_field_.Mutable(index)->assign(value);
}
inline void MapCompare::set_key_field(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:DifferentialService.MapCompare.key_field)
  key_field_.Mutable(index)->assign(std::move(value));
}
inline void MapCompare::set_key_field(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DifferentialService.MapCompare.key_field)
}
inline void MapCompare::set_key_field(int index, const char* value, size_t size) {
  key_field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.MapCompare.key_field)
}
inline std::string* MapCompare::_internal_add_key_field() {
  return key_field_.Add();
}
inline void MapCompare::add_key_field(const std::string& value) {
  key_field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DifferentialService.MapCompare.key_field)
}
inline void MapCompare::add_key_field(std::string&& value) {
  key_field_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DifferentialService.MapCompare.key_field)
}
inline void MapCompare::add_key_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DifferentialService.MapCompare.key_field)
}
inline void MapCompare::add_key_field(const char* value, size_t size) {
  key_field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DifferentialService.MapCompare.key_field)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapCompare::key_field() const {
  // @@protoc_insertion_point(field_list:DifferentialService.MapCompare.key_field)
  return key_field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapCompare::mutable_key_field() {
  // @@protoc_insertion_point(field_mutable_list:DifferentialService.MapCompare.key_field)
  return &key_field_;
}

// -------------------------------------------------------------------

// MapCompareNotSameIndex

// string repeated_field = 1;
inline void MapCompareNotSameIndex::clear_repeated_field() {
  repeated_field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MapCompareNotSameIndex::repeated_field() const {
  // @@protoc_insertion_point(field_get:DifferentialService.MapCompareNotSameIndex.repeated_field)
  return _internal_repeated_field();
}
inline void MapCompareNotSameIndex::set_repeated_field(const std::string& value) {
  _internal_set_repeated_field(value);
  // @@protoc_insertion_point(field_set:DifferentialService.MapCompareNotSameIndex.repeated_field)
}
inline std::string* MapCompareNotSameIndex::mutable_repeated_field() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.MapCompareNotSameIndex.repeated_field)
  return _internal_mutable_repeated_field();
}
inline const std::string& MapCompareNotSameIndex::_internal_repeated_field() const {
  return repeated_field_.GetNoArena();
}
inline void MapCompareNotSameIndex::_internal_set_repeated_field(const std::string& value) {
  
  repeated_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MapCompareNotSameIndex::set_repeated_field(std::string&& value) {
  
  repeated_field_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialService.MapCompareNotSameIndex.repeated_field)
}
inline void MapCompareNotSameIndex::set_repeated_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  repeated_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialService.MapCompareNotSameIndex.repeated_field)
}
inline void MapCompareNotSameIndex::set_repeated_field(const char* value, size_t size) {
  
  repeated_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.MapCompareNotSameIndex.repeated_field)
}
inline std::string* MapCompareNotSameIndex::_internal_mutable_repeated_field() {
  
  return repeated_field_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MapCompareNotSameIndex::release_repeated_field() {
  // @@protoc_insertion_point(field_release:DifferentialService.MapCompareNotSameIndex.repeated_field)
  
  return repeated_field_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MapCompareNotSameIndex::set_allocated_repeated_field(std::string* repeated_field) {
  if (repeated_field != nullptr) {
    
  } else {
    
  }
  repeated_field_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repeated_field);
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.MapCompareNotSameIndex.repeated_field)
}

// string first_key_field = 2;
inline void MapCompareNotSameIndex::clear_first_key_field() {
  first_key_field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MapCompareNotSameIndex::first_key_field() const {
  // @@protoc_insertion_point(field_get:DifferentialService.MapCompareNotSameIndex.first_key_field)
  return _internal_first_key_field();
}
inline void MapCompareNotSameIndex::set_first_key_field(const std::string& value) {
  _internal_set_first_key_field(value);
  // @@protoc_insertion_point(field_set:DifferentialService.MapCompareNotSameIndex.first_key_field)
}
inline std::string* MapCompareNotSameIndex::mutable_first_key_field() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.MapCompareNotSameIndex.first_key_field)
  return _internal_mutable_first_key_field();
}
inline const std::string& MapCompareNotSameIndex::_internal_first_key_field() const {
  return first_key_field_.GetNoArena();
}
inline void MapCompareNotSameIndex::_internal_set_first_key_field(const std::string& value) {
  
  first_key_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MapCompareNotSameIndex::set_first_key_field(std::string&& value) {
  
  first_key_field_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialService.MapCompareNotSameIndex.first_key_field)
}
inline void MapCompareNotSameIndex::set_first_key_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_key_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialService.MapCompareNotSameIndex.first_key_field)
}
inline void MapCompareNotSameIndex::set_first_key_field(const char* value, size_t size) {
  
  first_key_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.MapCompareNotSameIndex.first_key_field)
}
inline std::string* MapCompareNotSameIndex::_internal_mutable_first_key_field() {
  
  return first_key_field_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MapCompareNotSameIndex::release_first_key_field() {
  // @@protoc_insertion_point(field_release:DifferentialService.MapCompareNotSameIndex.first_key_field)
  
  return first_key_field_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MapCompareNotSameIndex::set_allocated_first_key_field(std::string* first_key_field) {
  if (first_key_field != nullptr) {
    
  } else {
    
  }
  first_key_field_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_key_field);
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.MapCompareNotSameIndex.first_key_field)
}

// string second_key_field = 3;
inline void MapCompareNotSameIndex::clear_second_key_field() {
  second_key_field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MapCompareNotSameIndex::second_key_field() const {
  // @@protoc_insertion_point(field_get:DifferentialService.MapCompareNotSameIndex.second_key_field)
  return _internal_second_key_field();
}
inline void MapCompareNotSameIndex::set_second_key_field(const std::string& value) {
  _internal_set_second_key_field(value);
  // @@protoc_insertion_point(field_set:DifferentialService.MapCompareNotSameIndex.second_key_field)
}
inline std::string* MapCompareNotSameIndex::mutable_second_key_field() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.MapCompareNotSameIndex.second_key_field)
  return _internal_mutable_second_key_field();
}
inline const std::string& MapCompareNotSameIndex::_internal_second_key_field() const {
  return second_key_field_.GetNoArena();
}
inline void MapCompareNotSameIndex::_internal_set_second_key_field(const std::string& value) {
  
  second_key_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MapCompareNotSameIndex::set_second_key_field(std::string&& value) {
  
  second_key_field_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialService.MapCompareNotSameIndex.second_key_field)
}
inline void MapCompareNotSameIndex::set_second_key_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  second_key_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialService.MapCompareNotSameIndex.second_key_field)
}
inline void MapCompareNotSameIndex::set_second_key_field(const char* value, size_t size) {
  
  second_key_field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.MapCompareNotSameIndex.second_key_field)
}
inline std::string* MapCompareNotSameIndex::_internal_mutable_second_key_field() {
  
  return second_key_field_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MapCompareNotSameIndex::release_second_key_field() {
  // @@protoc_insertion_point(field_release:DifferentialService.MapCompareNotSameIndex.second_key_field)
  
  return second_key_field_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MapCompareNotSameIndex::set_allocated_second_key_field(std::string* second_key_field) {
  if (second_key_field != nullptr) {
    
  } else {
    
  }
  second_key_field_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), second_key_field);
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.MapCompareNotSameIndex.second_key_field)
}

// -------------------------------------------------------------------

// FloatNumComparison

// double fraction = 1;
inline void FloatNumComparison::clear_fraction() {
  fraction_ = 0;
}
inline double FloatNumComparison::_internal_fraction() const {
  return fraction_;
}
inline double FloatNumComparison::fraction() const {
  // @@protoc_insertion_point(field_get:DifferentialService.FloatNumComparison.fraction)
  return _internal_fraction();
}
inline void FloatNumComparison::_internal_set_fraction(double value) {
  
  fraction_ = value;
}
inline void FloatNumComparison::set_fraction(double value) {
  _internal_set_fraction(value);
  // @@protoc_insertion_point(field_set:DifferentialService.FloatNumComparison.fraction)
}

// double margin = 2;
inline void FloatNumComparison::clear_margin() {
  margin_ = 0;
}
inline double FloatNumComparison::_internal_margin() const {
  return margin_;
}
inline double FloatNumComparison::margin() const {
  // @@protoc_insertion_point(field_get:DifferentialService.FloatNumComparison.margin)
  return _internal_margin();
}
inline void FloatNumComparison::_internal_set_margin(double value) {
  
  margin_ = value;
}
inline void FloatNumComparison::set_margin(double value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:DifferentialService.FloatNumComparison.margin)
}

// -------------------------------------------------------------------

// DiffRequest

// bytes first_message = 1;
inline void DiffRequest::clear_first_message() {
  first_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiffRequest::first_message() const {
  // @@protoc_insertion_point(field_get:DifferentialService.DiffRequest.first_message)
  return _internal_first_message();
}
inline void DiffRequest::set_first_message(const std::string& value) {
  _internal_set_first_message(value);
  // @@protoc_insertion_point(field_set:DifferentialService.DiffRequest.first_message)
}
inline std::string* DiffRequest::mutable_first_message() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.DiffRequest.first_message)
  return _internal_mutable_first_message();
}
inline const std::string& DiffRequest::_internal_first_message() const {
  return first_message_.GetNoArena();
}
inline void DiffRequest::_internal_set_first_message(const std::string& value) {
  
  first_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DiffRequest::set_first_message(std::string&& value) {
  
  first_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialService.DiffRequest.first_message)
}
inline void DiffRequest::set_first_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialService.DiffRequest.first_message)
}
inline void DiffRequest::set_first_message(const void* value, size_t size) {
  
  first_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.DiffRequest.first_message)
}
inline std::string* DiffRequest::_internal_mutable_first_message() {
  
  return first_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiffRequest::release_first_message() {
  // @@protoc_insertion_point(field_release:DifferentialService.DiffRequest.first_message)
  
  return first_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiffRequest::set_allocated_first_message(std::string* first_message) {
  if (first_message != nullptr) {
    
  } else {
    
  }
  first_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_message);
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.DiffRequest.first_message)
}

// bytes second_message = 2;
inline void DiffRequest::clear_second_message() {
  second_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiffRequest::second_message() const {
  // @@protoc_insertion_point(field_get:DifferentialService.DiffRequest.second_message)
  return _internal_second_message();
}
inline void DiffRequest::set_second_message(const std::string& value) {
  _internal_set_second_message(value);
  // @@protoc_insertion_point(field_set:DifferentialService.DiffRequest.second_message)
}
inline std::string* DiffRequest::mutable_second_message() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.DiffRequest.second_message)
  return _internal_mutable_second_message();
}
inline const std::string& DiffRequest::_internal_second_message() const {
  return second_message_.GetNoArena();
}
inline void DiffRequest::_internal_set_second_message(const std::string& value) {
  
  second_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DiffRequest::set_second_message(std::string&& value) {
  
  second_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialService.DiffRequest.second_message)
}
inline void DiffRequest::set_second_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  second_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialService.DiffRequest.second_message)
}
inline void DiffRequest::set_second_message(const void* value, size_t size) {
  
  second_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.DiffRequest.second_message)
}
inline std::string* DiffRequest::_internal_mutable_second_message() {
  
  return second_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiffRequest::release_second_message() {
  // @@protoc_insertion_point(field_release:DifferentialService.DiffRequest.second_message)
  
  return second_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiffRequest::set_allocated_second_message(std::string* second_message) {
  if (second_message != nullptr) {
    
  } else {
    
  }
  second_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), second_message);
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.DiffRequest.second_message)
}

// string name_of_message_descriptor = 3;
inline void DiffRequest::clear_name_of_message_descriptor() {
  name_of_message_descriptor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiffRequest::name_of_message_descriptor() const {
  // @@protoc_insertion_point(field_get:DifferentialService.DiffRequest.name_of_message_descriptor)
  return _internal_name_of_message_descriptor();
}
inline void DiffRequest::set_name_of_message_descriptor(const std::string& value) {
  _internal_set_name_of_message_descriptor(value);
  // @@protoc_insertion_point(field_set:DifferentialService.DiffRequest.name_of_message_descriptor)
}
inline std::string* DiffRequest::mutable_name_of_message_descriptor() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.DiffRequest.name_of_message_descriptor)
  return _internal_mutable_name_of_message_descriptor();
}
inline const std::string& DiffRequest::_internal_name_of_message_descriptor() const {
  return name_of_message_descriptor_.GetNoArena();
}
inline void DiffRequest::_internal_set_name_of_message_descriptor(const std::string& value) {
  
  name_of_message_descriptor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DiffRequest::set_name_of_message_descriptor(std::string&& value) {
  
  name_of_message_descriptor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialService.DiffRequest.name_of_message_descriptor)
}
inline void DiffRequest::set_name_of_message_descriptor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_of_message_descriptor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialService.DiffRequest.name_of_message_descriptor)
}
inline void DiffRequest::set_name_of_message_descriptor(const char* value, size_t size) {
  
  name_of_message_descriptor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.DiffRequest.name_of_message_descriptor)
}
inline std::string* DiffRequest::_internal_mutable_name_of_message_descriptor() {
  
  return name_of_message_descriptor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiffRequest::release_name_of_message_descriptor() {
  // @@protoc_insertion_point(field_release:DifferentialService.DiffRequest.name_of_message_descriptor)
  
  return name_of_message_descriptor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiffRequest::set_allocated_name_of_message_descriptor(std::string* name_of_message_descriptor) {
  if (name_of_message_descriptor != nullptr) {
    
  } else {
    
  }
  name_of_message_descriptor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_of_message_descriptor);
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.DiffRequest.name_of_message_descriptor)
}

// repeated bytes file_descriptor_proto = 4;
inline int DiffRequest::_internal_file_descriptor_proto_size() const {
  return file_descriptor_proto_.size();
}
inline int DiffRequest::file_descriptor_proto_size() const {
  return _internal_file_descriptor_proto_size();
}
inline void DiffRequest::clear_file_descriptor_proto() {
  file_descriptor_proto_.Clear();
}
inline std::string* DiffRequest::add_file_descriptor_proto() {
  // @@protoc_insertion_point(field_add_mutable:DifferentialService.DiffRequest.file_descriptor_proto)
  return _internal_add_file_descriptor_proto();
}
inline const std::string& DiffRequest::_internal_file_descriptor_proto(int index) const {
  return file_descriptor_proto_.Get(index);
}
inline const std::string& DiffRequest::file_descriptor_proto(int index) const {
  // @@protoc_insertion_point(field_get:DifferentialService.DiffRequest.file_descriptor_proto)
  return _internal_file_descriptor_proto(index);
}
inline std::string* DiffRequest::mutable_file_descriptor_proto(int index) {
  // @@protoc_insertion_point(field_mutable:DifferentialService.DiffRequest.file_descriptor_proto)
  return file_descriptor_proto_.Mutable(index);
}
inline void DiffRequest::set_file_descriptor_proto(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:DifferentialService.DiffRequest.file_descriptor_proto)
  file_descriptor_proto_.Mutable(index)->assign(value);
}
inline void DiffRequest::set_file_descriptor_proto(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:DifferentialService.DiffRequest.file_descriptor_proto)
  file_descriptor_proto_.Mutable(index)->assign(std::move(value));
}
inline void DiffRequest::set_file_descriptor_proto(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_descriptor_proto_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DifferentialService.DiffRequest.file_descriptor_proto)
}
inline void DiffRequest::set_file_descriptor_proto(int index, const void* value, size_t size) {
  file_descriptor_proto_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.DiffRequest.file_descriptor_proto)
}
inline std::string* DiffRequest::_internal_add_file_descriptor_proto() {
  return file_descriptor_proto_.Add();
}
inline void DiffRequest::add_file_descriptor_proto(const std::string& value) {
  file_descriptor_proto_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DifferentialService.DiffRequest.file_descriptor_proto)
}
inline void DiffRequest::add_file_descriptor_proto(std::string&& value) {
  file_descriptor_proto_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DifferentialService.DiffRequest.file_descriptor_proto)
}
inline void DiffRequest::add_file_descriptor_proto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_descriptor_proto_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DifferentialService.DiffRequest.file_descriptor_proto)
}
inline void DiffRequest::add_file_descriptor_proto(const void* value, size_t size) {
  file_descriptor_proto_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DifferentialService.DiffRequest.file_descriptor_proto)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DiffRequest::file_descriptor_proto() const {
  // @@protoc_insertion_point(field_list:DifferentialService.DiffRequest.file_descriptor_proto)
  return file_descriptor_proto_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DiffRequest::mutable_file_descriptor_proto() {
  // @@protoc_insertion_point(field_mutable_list:DifferentialService.DiffRequest.file_descriptor_proto)
  return &file_descriptor_proto_;
}

// .DifferentialService.IgnoreCriteria user_ignore = 5;
inline bool DiffRequest::_internal_has_user_ignore() const {
  return this != internal_default_instance() && user_ignore_ != nullptr;
}
inline bool DiffRequest::has_user_ignore() const {
  return _internal_has_user_ignore();
}
inline void DiffRequest::clear_user_ignore() {
  if (GetArenaNoVirtual() == nullptr && user_ignore_ != nullptr) {
    delete user_ignore_;
  }
  user_ignore_ = nullptr;
}
inline const ::DifferentialService::IgnoreCriteria& DiffRequest::_internal_user_ignore() const {
  const ::DifferentialService::IgnoreCriteria* p = user_ignore_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DifferentialService::IgnoreCriteria*>(
      &::DifferentialService::_IgnoreCriteria_default_instance_);
}
inline const ::DifferentialService::IgnoreCriteria& DiffRequest::user_ignore() const {
  // @@protoc_insertion_point(field_get:DifferentialService.DiffRequest.user_ignore)
  return _internal_user_ignore();
}
inline ::DifferentialService::IgnoreCriteria* DiffRequest::release_user_ignore() {
  // @@protoc_insertion_point(field_release:DifferentialService.DiffRequest.user_ignore)
  
  ::DifferentialService::IgnoreCriteria* temp = user_ignore_;
  user_ignore_ = nullptr;
  return temp;
}
inline ::DifferentialService::IgnoreCriteria* DiffRequest::_internal_mutable_user_ignore() {
  
  if (user_ignore_ == nullptr) {
    auto* p = CreateMaybeMessage<::DifferentialService::IgnoreCriteria>(GetArenaNoVirtual());
    user_ignore_ = p;
  }
  return user_ignore_;
}
inline ::DifferentialService::IgnoreCriteria* DiffRequest::mutable_user_ignore() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.DiffRequest.user_ignore)
  return _internal_mutable_user_ignore();
}
inline void DiffRequest::set_allocated_user_ignore(::DifferentialService::IgnoreCriteria* user_ignore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user_ignore_;
  }
  if (user_ignore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_ignore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_ignore, submessage_arena);
    }
    
  } else {
    
  }
  user_ignore_ = user_ignore;
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.DiffRequest.user_ignore)
}

// repeated .DifferentialService.RepeatedField repeated_field = 6;
inline int DiffRequest::_internal_repeated_field_size() const {
  return repeated_field_.size();
}
inline int DiffRequest::repeated_field_size() const {
  return _internal_repeated_field_size();
}
inline void DiffRequest::clear_repeated_field() {
  repeated_field_.Clear();
}
inline ::DifferentialService::RepeatedField* DiffRequest::mutable_repeated_field(int index) {
  // @@protoc_insertion_point(field_mutable:DifferentialService.DiffRequest.repeated_field)
  return repeated_field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialService::RepeatedField >*
DiffRequest::mutable_repeated_field() {
  // @@protoc_insertion_point(field_mutable_list:DifferentialService.DiffRequest.repeated_field)
  return &repeated_field_;
}
inline const ::DifferentialService::RepeatedField& DiffRequest::_internal_repeated_field(int index) const {
  return repeated_field_.Get(index);
}
inline const ::DifferentialService::RepeatedField& DiffRequest::repeated_field(int index) const {
  // @@protoc_insertion_point(field_get:DifferentialService.DiffRequest.repeated_field)
  return _internal_repeated_field(index);
}
inline ::DifferentialService::RepeatedField* DiffRequest::_internal_add_repeated_field() {
  return repeated_field_.Add();
}
inline ::DifferentialService::RepeatedField* DiffRequest::add_repeated_field() {
  // @@protoc_insertion_point(field_add:DifferentialService.DiffRequest.repeated_field)
  return _internal_add_repeated_field();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialService::RepeatedField >&
DiffRequest::repeated_field() const {
  // @@protoc_insertion_point(field_list:DifferentialService.DiffRequest.repeated_field)
  return repeated_field_;
}

// repeated .DifferentialService.MapCompare map_compare = 7;
inline int DiffRequest::_internal_map_compare_size() const {
  return map_compare_.size();
}
inline int DiffRequest::map_compare_size() const {
  return _internal_map_compare_size();
}
inline void DiffRequest::clear_map_compare() {
  map_compare_.Clear();
}
inline ::DifferentialService::MapCompare* DiffRequest::mutable_map_compare(int index) {
  // @@protoc_insertion_point(field_mutable:DifferentialService.DiffRequest.map_compare)
  return map_compare_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialService::MapCompare >*
DiffRequest::mutable_map_compare() {
  // @@protoc_insertion_point(field_mutable_list:DifferentialService.DiffRequest.map_compare)
  return &map_compare_;
}
inline const ::DifferentialService::MapCompare& DiffRequest::_internal_map_compare(int index) const {
  return map_compare_.Get(index);
}
inline const ::DifferentialService::MapCompare& DiffRequest::map_compare(int index) const {
  // @@protoc_insertion_point(field_get:DifferentialService.DiffRequest.map_compare)
  return _internal_map_compare(index);
}
inline ::DifferentialService::MapCompare* DiffRequest::_internal_add_map_compare() {
  return map_compare_.Add();
}
inline ::DifferentialService::MapCompare* DiffRequest::add_map_compare() {
  // @@protoc_insertion_point(field_add:DifferentialService.DiffRequest.map_compare)
  return _internal_add_map_compare();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialService::MapCompare >&
DiffRequest::map_compare() const {
  // @@protoc_insertion_point(field_list:DifferentialService.DiffRequest.map_compare)
  return map_compare_;
}

// .DifferentialService.MapCompareNotSameIndex map_compare_not_same_index = 8;
inline bool DiffRequest::_internal_has_map_compare_not_same_index() const {
  return this != internal_default_instance() && map_compare_not_same_index_ != nullptr;
}
inline bool DiffRequest::has_map_compare_not_same_index() const {
  return _internal_has_map_compare_not_same_index();
}
inline void DiffRequest::clear_map_compare_not_same_index() {
  if (GetArenaNoVirtual() == nullptr && map_compare_not_same_index_ != nullptr) {
    delete map_compare_not_same_index_;
  }
  map_compare_not_same_index_ = nullptr;
}
inline const ::DifferentialService::MapCompareNotSameIndex& DiffRequest::_internal_map_compare_not_same_index() const {
  const ::DifferentialService::MapCompareNotSameIndex* p = map_compare_not_same_index_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DifferentialService::MapCompareNotSameIndex*>(
      &::DifferentialService::_MapCompareNotSameIndex_default_instance_);
}
inline const ::DifferentialService::MapCompareNotSameIndex& DiffRequest::map_compare_not_same_index() const {
  // @@protoc_insertion_point(field_get:DifferentialService.DiffRequest.map_compare_not_same_index)
  return _internal_map_compare_not_same_index();
}
inline ::DifferentialService::MapCompareNotSameIndex* DiffRequest::release_map_compare_not_same_index() {
  // @@protoc_insertion_point(field_release:DifferentialService.DiffRequest.map_compare_not_same_index)
  
  ::DifferentialService::MapCompareNotSameIndex* temp = map_compare_not_same_index_;
  map_compare_not_same_index_ = nullptr;
  return temp;
}
inline ::DifferentialService::MapCompareNotSameIndex* DiffRequest::_internal_mutable_map_compare_not_same_index() {
  
  if (map_compare_not_same_index_ == nullptr) {
    auto* p = CreateMaybeMessage<::DifferentialService::MapCompareNotSameIndex>(GetArenaNoVirtual());
    map_compare_not_same_index_ = p;
  }
  return map_compare_not_same_index_;
}
inline ::DifferentialService::MapCompareNotSameIndex* DiffRequest::mutable_map_compare_not_same_index() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.DiffRequest.map_compare_not_same_index)
  return _internal_mutable_map_compare_not_same_index();
}
inline void DiffRequest::set_allocated_map_compare_not_same_index(::DifferentialService::MapCompareNotSameIndex* map_compare_not_same_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_compare_not_same_index_;
  }
  if (map_compare_not_same_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map_compare_not_same_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_compare_not_same_index, submessage_arena);
    }
    
  } else {
    
  }
  map_compare_not_same_index_ = map_compare_not_same_index;
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.DiffRequest.map_compare_not_same_index)
}

// .DifferentialService.FloatNumComparison float_num_comparison = 9;
inline bool DiffRequest::_internal_has_float_num_comparison() const {
  return this != internal_default_instance() && float_num_comparison_ != nullptr;
}
inline bool DiffRequest::has_float_num_comparison() const {
  return _internal_has_float_num_comparison();
}
inline void DiffRequest::clear_float_num_comparison() {
  if (GetArenaNoVirtual() == nullptr && float_num_comparison_ != nullptr) {
    delete float_num_comparison_;
  }
  float_num_comparison_ = nullptr;
}
inline const ::DifferentialService::FloatNumComparison& DiffRequest::_internal_float_num_comparison() const {
  const ::DifferentialService::FloatNumComparison* p = float_num_comparison_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DifferentialService::FloatNumComparison*>(
      &::DifferentialService::_FloatNumComparison_default_instance_);
}
inline const ::DifferentialService::FloatNumComparison& DiffRequest::float_num_comparison() const {
  // @@protoc_insertion_point(field_get:DifferentialService.DiffRequest.float_num_comparison)
  return _internal_float_num_comparison();
}
inline ::DifferentialService::FloatNumComparison* DiffRequest::release_float_num_comparison() {
  // @@protoc_insertion_point(field_release:DifferentialService.DiffRequest.float_num_comparison)
  
  ::DifferentialService::FloatNumComparison* temp = float_num_comparison_;
  float_num_comparison_ = nullptr;
  return temp;
}
inline ::DifferentialService::FloatNumComparison* DiffRequest::_internal_mutable_float_num_comparison() {
  
  if (float_num_comparison_ == nullptr) {
    auto* p = CreateMaybeMessage<::DifferentialService::FloatNumComparison>(GetArenaNoVirtual());
    float_num_comparison_ = p;
  }
  return float_num_comparison_;
}
inline ::DifferentialService::FloatNumComparison* DiffRequest::mutable_float_num_comparison() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.DiffRequest.float_num_comparison)
  return _internal_mutable_float_num_comparison();
}
inline void DiffRequest::set_allocated_float_num_comparison(::DifferentialService::FloatNumComparison* float_num_comparison) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete float_num_comparison_;
  }
  if (float_num_comparison) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      float_num_comparison = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_num_comparison, submessage_arena);
    }
    
  } else {
    
  }
  float_num_comparison_ = float_num_comparison;
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.DiffRequest.float_num_comparison)
}

// -------------------------------------------------------------------

// DiffResponse

// string result = 1;
inline void DiffResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiffResponse::result() const {
  // @@protoc_insertion_point(field_get:DifferentialService.DiffResponse.result)
  return _internal_result();
}
inline void DiffResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:DifferentialService.DiffResponse.result)
}
inline std::string* DiffResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.DiffResponse.result)
  return _internal_mutable_result();
}
inline const std::string& DiffResponse::_internal_result() const {
  return result_.GetNoArena();
}
inline void DiffResponse::_internal_set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DiffResponse::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialService.DiffResponse.result)
}
inline void DiffResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialService.DiffResponse.result)
}
inline void DiffResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.DiffResponse.result)
}
inline std::string* DiffResponse::_internal_mutable_result() {
  
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiffResponse::release_result() {
  // @@protoc_insertion_point(field_release:DifferentialService.DiffResponse.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiffResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.DiffResponse.result)
}

// string error = 2;
inline void DiffResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiffResponse::error() const {
  // @@protoc_insertion_point(field_get:DifferentialService.DiffResponse.error)
  return _internal_error();
}
inline void DiffResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:DifferentialService.DiffResponse.error)
}
inline std::string* DiffResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:DifferentialService.DiffResponse.error)
  return _internal_mutable_error();
}
inline const std::string& DiffResponse::_internal_error() const {
  return error_.GetNoArena();
}
inline void DiffResponse::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DiffResponse::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialService.DiffResponse.error)
}
inline void DiffResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialService.DiffResponse.error)
}
inline void DiffResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialService.DiffResponse.error)
}
inline std::string* DiffResponse::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiffResponse::release_error() {
  // @@protoc_insertion_point(field_release:DifferentialService.DiffResponse.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiffResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:DifferentialService.DiffResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DifferentialService

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DifferentialService::IgnoreCriteria_IgnoreFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DifferentialService::IgnoreCriteria_IgnoreFlag>() {
  return ::DifferentialService::IgnoreCriteria_IgnoreFlag_descriptor();
}
template <> struct is_proto_enum< ::DifferentialService::RepeatedField_TreatAsFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DifferentialService::RepeatedField_TreatAsFlag>() {
  return ::DifferentialService::RepeatedField_TreatAsFlag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_differential_5fservice_2eproto
