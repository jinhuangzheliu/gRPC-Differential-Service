// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: differential_test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_differential_5ftest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_differential_5ftest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_differential_5ftest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_differential_5ftest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_differential_5ftest_2eproto;
namespace DifferentialTest {
class Company;
class CompanyDefaultTypeInternal;
extern CompanyDefaultTypeInternal _Company_default_instance_;
class DependentInfo;
class DependentInfoDefaultTypeInternal;
extern DependentInfoDefaultTypeInternal _DependentInfo_default_instance_;
class EducationInfo;
class EducationInfoDefaultTypeInternal;
extern EducationInfoDefaultTypeInternal _EducationInfo_default_instance_;
class ExamScore;
class ExamScoreDefaultTypeInternal;
extern ExamScoreDefaultTypeInternal _ExamScore_default_instance_;
class TestEmployee;
class TestEmployeeDefaultTypeInternal;
extern TestEmployeeDefaultTypeInternal _TestEmployee_default_instance_;
class TestEmployee_InfoEntry_DoNotUse;
class TestEmployee_InfoEntry_DoNotUseDefaultTypeInternal;
extern TestEmployee_InfoEntry_DoNotUseDefaultTypeInternal _TestEmployee_InfoEntry_DoNotUse_default_instance_;
}  // namespace DifferentialTest
PROTOBUF_NAMESPACE_OPEN
template<> ::DifferentialTest::Company* Arena::CreateMaybeMessage<::DifferentialTest::Company>(Arena*);
template<> ::DifferentialTest::DependentInfo* Arena::CreateMaybeMessage<::DifferentialTest::DependentInfo>(Arena*);
template<> ::DifferentialTest::EducationInfo* Arena::CreateMaybeMessage<::DifferentialTest::EducationInfo>(Arena*);
template<> ::DifferentialTest::ExamScore* Arena::CreateMaybeMessage<::DifferentialTest::ExamScore>(Arena*);
template<> ::DifferentialTest::TestEmployee* Arena::CreateMaybeMessage<::DifferentialTest::TestEmployee>(Arena*);
template<> ::DifferentialTest::TestEmployee_InfoEntry_DoNotUse* Arena::CreateMaybeMessage<::DifferentialTest::TestEmployee_InfoEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DifferentialTest {

// ===================================================================

class Company :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialTest.Company) */ {
 public:
  Company();
  virtual ~Company();

  Company(const Company& from);
  Company(Company&& from) noexcept
    : Company() {
    *this = ::std::move(from);
  }

  inline Company& operator=(const Company& from) {
    CopyFrom(from);
    return *this;
  }
  inline Company& operator=(Company&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Company& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Company* internal_default_instance() {
    return reinterpret_cast<const Company*>(
               &_Company_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Company& a, Company& b) {
    a.Swap(&b);
  }
  inline void Swap(Company* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Company* New() const final {
    return CreateMaybeMessage<Company>(nullptr);
  }

  Company* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Company>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Company& from);
  void MergeFrom(const Company& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Company* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialTest.Company";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5ftest_2eproto);
    return ::descriptor_table_differential_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOccupationFieldNumber = 2,
    kAddressFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string occupation = 2;
  void clear_occupation();
  const std::string& occupation() const;
  void set_occupation(const std::string& value);
  void set_occupation(std::string&& value);
  void set_occupation(const char* value);
  void set_occupation(const char* value, size_t size);
  std::string* mutable_occupation();
  std::string* release_occupation();
  void set_allocated_occupation(std::string* occupation);
  private:
  const std::string& _internal_occupation() const;
  void _internal_set_occupation(const std::string& value);
  std::string* _internal_mutable_occupation();
  public:

  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:DifferentialTest.Company)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr occupation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5ftest_2eproto;
};
// -------------------------------------------------------------------

class EducationInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialTest.EducationInfo) */ {
 public:
  EducationInfo();
  virtual ~EducationInfo();

  EducationInfo(const EducationInfo& from);
  EducationInfo(EducationInfo&& from) noexcept
    : EducationInfo() {
    *this = ::std::move(from);
  }

  inline EducationInfo& operator=(const EducationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EducationInfo& operator=(EducationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EducationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EducationInfo* internal_default_instance() {
    return reinterpret_cast<const EducationInfo*>(
               &_EducationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EducationInfo& a, EducationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EducationInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EducationInfo* New() const final {
    return CreateMaybeMessage<EducationInfo>(nullptr);
  }

  EducationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EducationInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EducationInfo& from);
  void MergeFrom(const EducationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EducationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialTest.EducationInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5ftest_2eproto);
    return ::descriptor_table_differential_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDegreeFieldNumber = 2,
    kMajorFieldNumber = 3,
    kAddressFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string degree = 2;
  void clear_degree();
  const std::string& degree() const;
  void set_degree(const std::string& value);
  void set_degree(std::string&& value);
  void set_degree(const char* value);
  void set_degree(const char* value, size_t size);
  std::string* mutable_degree();
  std::string* release_degree();
  void set_allocated_degree(std::string* degree);
  private:
  const std::string& _internal_degree() const;
  void _internal_set_degree(const std::string& value);
  std::string* _internal_mutable_degree();
  public:

  // string major = 3;
  void clear_major();
  const std::string& major() const;
  void set_major(const std::string& value);
  void set_major(std::string&& value);
  void set_major(const char* value);
  void set_major(const char* value, size_t size);
  std::string* mutable_major();
  std::string* release_major();
  void set_allocated_major(std::string* major);
  private:
  const std::string& _internal_major() const;
  void _internal_set_major(const std::string& value);
  std::string* _internal_mutable_major();
  public:

  // string address = 4;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:DifferentialTest.EducationInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr degree_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr major_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5ftest_2eproto;
};
// -------------------------------------------------------------------

class DependentInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialTest.DependentInfo) */ {
 public:
  DependentInfo();
  virtual ~DependentInfo();

  DependentInfo(const DependentInfo& from);
  DependentInfo(DependentInfo&& from) noexcept
    : DependentInfo() {
    *this = ::std::move(from);
  }

  inline DependentInfo& operator=(const DependentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DependentInfo& operator=(DependentInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DependentInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DependentInfo* internal_default_instance() {
    return reinterpret_cast<const DependentInfo*>(
               &_DependentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DependentInfo& a, DependentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DependentInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DependentInfo* New() const final {
    return CreateMaybeMessage<DependentInfo>(nullptr);
  }

  DependentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DependentInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DependentInfo& from);
  void MergeFrom(const DependentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DependentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialTest.DependentInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5ftest_2eproto);
    return ::descriptor_table_differential_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
  };
  // repeated string name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // repeated int32 age = 2;
  int age_size() const;
  private:
  int _internal_age_size() const;
  public:
  void clear_age();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_age() const;
  void _internal_add_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_age();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 age(int index) const;
  void set_age(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      age() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_age();

  // @@protoc_insertion_point(class_scope:DifferentialTest.DependentInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > age_;
  mutable std::atomic<int> _age_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5ftest_2eproto;
};
// -------------------------------------------------------------------

class ExamScore :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialTest.ExamScore) */ {
 public:
  ExamScore();
  virtual ~ExamScore();

  ExamScore(const ExamScore& from);
  ExamScore(ExamScore&& from) noexcept
    : ExamScore() {
    *this = ::std::move(from);
  }

  inline ExamScore& operator=(const ExamScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExamScore& operator=(ExamScore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExamScore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExamScore* internal_default_instance() {
    return reinterpret_cast<const ExamScore*>(
               &_ExamScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExamScore& a, ExamScore& b) {
    a.Swap(&b);
  }
  inline void Swap(ExamScore* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExamScore* New() const final {
    return CreateMaybeMessage<ExamScore>(nullptr);
  }

  ExamScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExamScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExamScore& from);
  void MergeFrom(const ExamScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExamScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialTest.ExamScore";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5ftest_2eproto);
    return ::descriptor_table_differential_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExam1FieldNumber = 1,
    kExam2FieldNumber = 3,
    kScore1FieldNumber = 2,
    kScore2FieldNumber = 4,
  };
  // string exam1 = 1;
  void clear_exam1();
  const std::string& exam1() const;
  void set_exam1(const std::string& value);
  void set_exam1(std::string&& value);
  void set_exam1(const char* value);
  void set_exam1(const char* value, size_t size);
  std::string* mutable_exam1();
  std::string* release_exam1();
  void set_allocated_exam1(std::string* exam1);
  private:
  const std::string& _internal_exam1() const;
  void _internal_set_exam1(const std::string& value);
  std::string* _internal_mutable_exam1();
  public:

  // string exam2 = 3;
  void clear_exam2();
  const std::string& exam2() const;
  void set_exam2(const std::string& value);
  void set_exam2(std::string&& value);
  void set_exam2(const char* value);
  void set_exam2(const char* value, size_t size);
  std::string* mutable_exam2();
  std::string* release_exam2();
  void set_allocated_exam2(std::string* exam2);
  private:
  const std::string& _internal_exam2() const;
  void _internal_set_exam2(const std::string& value);
  std::string* _internal_mutable_exam2();
  public:

  // int32 score1 = 2;
  void clear_score1();
  ::PROTOBUF_NAMESPACE_ID::int32 score1() const;
  void set_score1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score1() const;
  void _internal_set_score1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float score2 = 4;
  void clear_score2();
  float score2() const;
  void set_score2(float value);
  private:
  float _internal_score2() const;
  void _internal_set_score2(float value);
  public:

  // @@protoc_insertion_point(class_scope:DifferentialTest.ExamScore)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exam1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exam2_;
  ::PROTOBUF_NAMESPACE_ID::int32 score1_;
  float score2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5ftest_2eproto;
};
// -------------------------------------------------------------------

class TestEmployee_InfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestEmployee_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TestEmployee_InfoEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  TestEmployee_InfoEntry_DoNotUse();
  TestEmployee_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TestEmployee_InfoEntry_DoNotUse& other);
  static const TestEmployee_InfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TestEmployee_InfoEntry_DoNotUse*>(&_TestEmployee_InfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DifferentialTest.TestEmployee.InfoEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DifferentialTest.TestEmployee.InfoEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5ftest_2eproto);
    return ::descriptor_table_differential_5ftest_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class TestEmployee :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DifferentialTest.TestEmployee) */ {
 public:
  TestEmployee();
  virtual ~TestEmployee();

  TestEmployee(const TestEmployee& from);
  TestEmployee(TestEmployee&& from) noexcept
    : TestEmployee() {
    *this = ::std::move(from);
  }

  inline TestEmployee& operator=(const TestEmployee& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestEmployee& operator=(TestEmployee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestEmployee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestEmployee* internal_default_instance() {
    return reinterpret_cast<const TestEmployee*>(
               &_TestEmployee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TestEmployee& a, TestEmployee& b) {
    a.Swap(&b);
  }
  inline void Swap(TestEmployee* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestEmployee* New() const final {
    return CreateMaybeMessage<TestEmployee>(nullptr);
  }

  TestEmployee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestEmployee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestEmployee& from);
  void MergeFrom(const TestEmployee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestEmployee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DifferentialTest.TestEmployee";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_differential_5ftest_2eproto);
    return ::descriptor_table_differential_5ftest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAreasFieldNumber = 5,
    kEducationFieldNumber = 6,
    kExamScoreFieldNumber = 9,
    kInfoFieldNumber = 10,
    kFullnameFieldNumber = 2,
    kEmployerFieldNumber = 4,
    kDependentsFieldNumber = 7,
    kEmployIdFieldNumber = 1,
    kAgeFieldNumber = 3,
    kFloatpointFieldNumber = 8,
  };
  // repeated string areas = 5;
  int areas_size() const;
  private:
  int _internal_areas_size() const;
  public:
  void clear_areas();
  const std::string& areas(int index) const;
  std::string* mutable_areas(int index);
  void set_areas(int index, const std::string& value);
  void set_areas(int index, std::string&& value);
  void set_areas(int index, const char* value);
  void set_areas(int index, const char* value, size_t size);
  std::string* add_areas();
  void add_areas(const std::string& value);
  void add_areas(std::string&& value);
  void add_areas(const char* value);
  void add_areas(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& areas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_areas();
  private:
  const std::string& _internal_areas(int index) const;
  std::string* _internal_add_areas();
  public:

  // repeated .DifferentialTest.EducationInfo education = 6;
  int education_size() const;
  private:
  int _internal_education_size() const;
  public:
  void clear_education();
  ::DifferentialTest::EducationInfo* mutable_education(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialTest::EducationInfo >*
      mutable_education();
  private:
  const ::DifferentialTest::EducationInfo& _internal_education(int index) const;
  ::DifferentialTest::EducationInfo* _internal_add_education();
  public:
  const ::DifferentialTest::EducationInfo& education(int index) const;
  ::DifferentialTest::EducationInfo* add_education();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialTest::EducationInfo >&
      education() const;

  // repeated .DifferentialTest.ExamScore exam_score = 9;
  int exam_score_size() const;
  private:
  int _internal_exam_score_size() const;
  public:
  void clear_exam_score();
  ::DifferentialTest::ExamScore* mutable_exam_score(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialTest::ExamScore >*
      mutable_exam_score();
  private:
  const ::DifferentialTest::ExamScore& _internal_exam_score(int index) const;
  ::DifferentialTest::ExamScore* _internal_add_exam_score();
  public:
  const ::DifferentialTest::ExamScore& exam_score(int index) const;
  ::DifferentialTest::ExamScore* add_exam_score();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialTest::ExamScore >&
      exam_score() const;

  // map<string, string> info = 10;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_info();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_info();

  // string fullname = 2;
  void clear_fullname();
  const std::string& fullname() const;
  void set_fullname(const std::string& value);
  void set_fullname(std::string&& value);
  void set_fullname(const char* value);
  void set_fullname(const char* value, size_t size);
  std::string* mutable_fullname();
  std::string* release_fullname();
  void set_allocated_fullname(std::string* fullname);
  private:
  const std::string& _internal_fullname() const;
  void _internal_set_fullname(const std::string& value);
  std::string* _internal_mutable_fullname();
  public:

  // .DifferentialTest.Company employer = 4;
  bool has_employer() const;
  private:
  bool _internal_has_employer() const;
  public:
  void clear_employer();
  const ::DifferentialTest::Company& employer() const;
  ::DifferentialTest::Company* release_employer();
  ::DifferentialTest::Company* mutable_employer();
  void set_allocated_employer(::DifferentialTest::Company* employer);
  private:
  const ::DifferentialTest::Company& _internal_employer() const;
  ::DifferentialTest::Company* _internal_mutable_employer();
  public:

  // .DifferentialTest.DependentInfo dependents = 7;
  bool has_dependents() const;
  private:
  bool _internal_has_dependents() const;
  public:
  void clear_dependents();
  const ::DifferentialTest::DependentInfo& dependents() const;
  ::DifferentialTest::DependentInfo* release_dependents();
  ::DifferentialTest::DependentInfo* mutable_dependents();
  void set_allocated_dependents(::DifferentialTest::DependentInfo* dependents);
  private:
  const ::DifferentialTest::DependentInfo& _internal_dependents() const;
  ::DifferentialTest::DependentInfo* _internal_mutable_dependents();
  public:

  // int32 employ_id = 1;
  void clear_employ_id();
  ::PROTOBUF_NAMESPACE_ID::int32 employ_id() const;
  void set_employ_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_employ_id() const;
  void _internal_set_employ_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 age = 3;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double floatpoint = 8;
  void clear_floatpoint();
  double floatpoint() const;
  void set_floatpoint(double value);
  private:
  double _internal_floatpoint() const;
  void _internal_set_floatpoint(double value);
  public:

  // @@protoc_insertion_point(class_scope:DifferentialTest.TestEmployee)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> areas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialTest::EducationInfo > education_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialTest::ExamScore > exam_score_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TestEmployee_InfoEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
  ::DifferentialTest::Company* employer_;
  ::DifferentialTest::DependentInfo* dependents_;
  ::PROTOBUF_NAMESPACE_ID::int32 employ_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  double floatpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_differential_5ftest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Company

// string name = 1;
inline void Company::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Company::name() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.Company.name)
  return _internal_name();
}
inline void Company::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.Company.name)
}
inline std::string* Company::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.Company.name)
  return _internal_mutable_name();
}
inline const std::string& Company::_internal_name() const {
  return name_.GetNoArena();
}
inline void Company::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Company::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialTest.Company.name)
}
inline void Company::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialTest.Company.name)
}
inline void Company::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialTest.Company.name)
}
inline std::string* Company::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Company::release_name() {
  // @@protoc_insertion_point(field_release:DifferentialTest.Company.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DifferentialTest.Company.name)
}

// string occupation = 2;
inline void Company::clear_occupation() {
  occupation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Company::occupation() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.Company.occupation)
  return _internal_occupation();
}
inline void Company::set_occupation(const std::string& value) {
  _internal_set_occupation(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.Company.occupation)
}
inline std::string* Company::mutable_occupation() {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.Company.occupation)
  return _internal_mutable_occupation();
}
inline const std::string& Company::_internal_occupation() const {
  return occupation_.GetNoArena();
}
inline void Company::_internal_set_occupation(const std::string& value) {
  
  occupation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Company::set_occupation(std::string&& value) {
  
  occupation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialTest.Company.occupation)
}
inline void Company::set_occupation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  occupation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialTest.Company.occupation)
}
inline void Company::set_occupation(const char* value, size_t size) {
  
  occupation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialTest.Company.occupation)
}
inline std::string* Company::_internal_mutable_occupation() {
  
  return occupation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Company::release_occupation() {
  // @@protoc_insertion_point(field_release:DifferentialTest.Company.occupation)
  
  return occupation_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_allocated_occupation(std::string* occupation) {
  if (occupation != nullptr) {
    
  } else {
    
  }
  occupation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), occupation);
  // @@protoc_insertion_point(field_set_allocated:DifferentialTest.Company.occupation)
}

// string address = 3;
inline void Company::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Company::address() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.Company.address)
  return _internal_address();
}
inline void Company::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.Company.address)
}
inline std::string* Company::mutable_address() {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.Company.address)
  return _internal_mutable_address();
}
inline const std::string& Company::_internal_address() const {
  return address_.GetNoArena();
}
inline void Company::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Company::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialTest.Company.address)
}
inline void Company::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialTest.Company.address)
}
inline void Company::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialTest.Company.address)
}
inline std::string* Company::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Company::release_address() {
  // @@protoc_insertion_point(field_release:DifferentialTest.Company.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:DifferentialTest.Company.address)
}

// -------------------------------------------------------------------

// EducationInfo

// string name = 1;
inline void EducationInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EducationInfo::name() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.EducationInfo.name)
  return _internal_name();
}
inline void EducationInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.EducationInfo.name)
}
inline std::string* EducationInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.EducationInfo.name)
  return _internal_mutable_name();
}
inline const std::string& EducationInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void EducationInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EducationInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialTest.EducationInfo.name)
}
inline void EducationInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialTest.EducationInfo.name)
}
inline void EducationInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialTest.EducationInfo.name)
}
inline std::string* EducationInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EducationInfo::release_name() {
  // @@protoc_insertion_point(field_release:DifferentialTest.EducationInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EducationInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DifferentialTest.EducationInfo.name)
}

// string degree = 2;
inline void EducationInfo::clear_degree() {
  degree_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EducationInfo::degree() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.EducationInfo.degree)
  return _internal_degree();
}
inline void EducationInfo::set_degree(const std::string& value) {
  _internal_set_degree(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.EducationInfo.degree)
}
inline std::string* EducationInfo::mutable_degree() {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.EducationInfo.degree)
  return _internal_mutable_degree();
}
inline const std::string& EducationInfo::_internal_degree() const {
  return degree_.GetNoArena();
}
inline void EducationInfo::_internal_set_degree(const std::string& value) {
  
  degree_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EducationInfo::set_degree(std::string&& value) {
  
  degree_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialTest.EducationInfo.degree)
}
inline void EducationInfo::set_degree(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  degree_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialTest.EducationInfo.degree)
}
inline void EducationInfo::set_degree(const char* value, size_t size) {
  
  degree_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialTest.EducationInfo.degree)
}
inline std::string* EducationInfo::_internal_mutable_degree() {
  
  return degree_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EducationInfo::release_degree() {
  // @@protoc_insertion_point(field_release:DifferentialTest.EducationInfo.degree)
  
  return degree_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EducationInfo::set_allocated_degree(std::string* degree) {
  if (degree != nullptr) {
    
  } else {
    
  }
  degree_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), degree);
  // @@protoc_insertion_point(field_set_allocated:DifferentialTest.EducationInfo.degree)
}

// string major = 3;
inline void EducationInfo::clear_major() {
  major_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EducationInfo::major() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.EducationInfo.major)
  return _internal_major();
}
inline void EducationInfo::set_major(const std::string& value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.EducationInfo.major)
}
inline std::string* EducationInfo::mutable_major() {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.EducationInfo.major)
  return _internal_mutable_major();
}
inline const std::string& EducationInfo::_internal_major() const {
  return major_.GetNoArena();
}
inline void EducationInfo::_internal_set_major(const std::string& value) {
  
  major_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EducationInfo::set_major(std::string&& value) {
  
  major_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialTest.EducationInfo.major)
}
inline void EducationInfo::set_major(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  major_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialTest.EducationInfo.major)
}
inline void EducationInfo::set_major(const char* value, size_t size) {
  
  major_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialTest.EducationInfo.major)
}
inline std::string* EducationInfo::_internal_mutable_major() {
  
  return major_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EducationInfo::release_major() {
  // @@protoc_insertion_point(field_release:DifferentialTest.EducationInfo.major)
  
  return major_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EducationInfo::set_allocated_major(std::string* major) {
  if (major != nullptr) {
    
  } else {
    
  }
  major_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), major);
  // @@protoc_insertion_point(field_set_allocated:DifferentialTest.EducationInfo.major)
}

// string address = 4;
inline void EducationInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EducationInfo::address() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.EducationInfo.address)
  return _internal_address();
}
inline void EducationInfo::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.EducationInfo.address)
}
inline std::string* EducationInfo::mutable_address() {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.EducationInfo.address)
  return _internal_mutable_address();
}
inline const std::string& EducationInfo::_internal_address() const {
  return address_.GetNoArena();
}
inline void EducationInfo::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EducationInfo::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialTest.EducationInfo.address)
}
inline void EducationInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialTest.EducationInfo.address)
}
inline void EducationInfo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialTest.EducationInfo.address)
}
inline std::string* EducationInfo::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EducationInfo::release_address() {
  // @@protoc_insertion_point(field_release:DifferentialTest.EducationInfo.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EducationInfo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:DifferentialTest.EducationInfo.address)
}

// -------------------------------------------------------------------

// DependentInfo

// repeated string name = 1;
inline int DependentInfo::_internal_name_size() const {
  return name_.size();
}
inline int DependentInfo::name_size() const {
  return _internal_name_size();
}
inline void DependentInfo::clear_name() {
  name_.Clear();
}
inline std::string* DependentInfo::add_name() {
  // @@protoc_insertion_point(field_add_mutable:DifferentialTest.DependentInfo.name)
  return _internal_add_name();
}
inline const std::string& DependentInfo::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& DependentInfo::name(int index) const {
  // @@protoc_insertion_point(field_get:DifferentialTest.DependentInfo.name)
  return _internal_name(index);
}
inline std::string* DependentInfo::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.DependentInfo.name)
  return name_.Mutable(index);
}
inline void DependentInfo::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:DifferentialTest.DependentInfo.name)
  name_.Mutable(index)->assign(value);
}
inline void DependentInfo::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:DifferentialTest.DependentInfo.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void DependentInfo::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DifferentialTest.DependentInfo.name)
}
inline void DependentInfo::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DifferentialTest.DependentInfo.name)
}
inline std::string* DependentInfo::_internal_add_name() {
  return name_.Add();
}
inline void DependentInfo::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DifferentialTest.DependentInfo.name)
}
inline void DependentInfo::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DifferentialTest.DependentInfo.name)
}
inline void DependentInfo::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DifferentialTest.DependentInfo.name)
}
inline void DependentInfo::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DifferentialTest.DependentInfo.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DependentInfo::name() const {
  // @@protoc_insertion_point(field_list:DifferentialTest.DependentInfo.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DependentInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:DifferentialTest.DependentInfo.name)
  return &name_;
}

// repeated int32 age = 2;
inline int DependentInfo::_internal_age_size() const {
  return age_.size();
}
inline int DependentInfo::age_size() const {
  return _internal_age_size();
}
inline void DependentInfo::clear_age() {
  age_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DependentInfo::_internal_age(int index) const {
  return age_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DependentInfo::age(int index) const {
  // @@protoc_insertion_point(field_get:DifferentialTest.DependentInfo.age)
  return _internal_age(index);
}
inline void DependentInfo::set_age(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  age_.Set(index, value);
  // @@protoc_insertion_point(field_set:DifferentialTest.DependentInfo.age)
}
inline void DependentInfo::_internal_add_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  age_.Add(value);
}
inline void DependentInfo::add_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_age(value);
  // @@protoc_insertion_point(field_add:DifferentialTest.DependentInfo.age)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DependentInfo::_internal_age() const {
  return age_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DependentInfo::age() const {
  // @@protoc_insertion_point(field_list:DifferentialTest.DependentInfo.age)
  return _internal_age();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DependentInfo::_internal_mutable_age() {
  return &age_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DependentInfo::mutable_age() {
  // @@protoc_insertion_point(field_mutable_list:DifferentialTest.DependentInfo.age)
  return _internal_mutable_age();
}

// -------------------------------------------------------------------

// ExamScore

// string exam1 = 1;
inline void ExamScore::clear_exam1() {
  exam1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExamScore::exam1() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.ExamScore.exam1)
  return _internal_exam1();
}
inline void ExamScore::set_exam1(const std::string& value) {
  _internal_set_exam1(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.ExamScore.exam1)
}
inline std::string* ExamScore::mutable_exam1() {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.ExamScore.exam1)
  return _internal_mutable_exam1();
}
inline const std::string& ExamScore::_internal_exam1() const {
  return exam1_.GetNoArena();
}
inline void ExamScore::_internal_set_exam1(const std::string& value) {
  
  exam1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExamScore::set_exam1(std::string&& value) {
  
  exam1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialTest.ExamScore.exam1)
}
inline void ExamScore::set_exam1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exam1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialTest.ExamScore.exam1)
}
inline void ExamScore::set_exam1(const char* value, size_t size) {
  
  exam1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialTest.ExamScore.exam1)
}
inline std::string* ExamScore::_internal_mutable_exam1() {
  
  return exam1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExamScore::release_exam1() {
  // @@protoc_insertion_point(field_release:DifferentialTest.ExamScore.exam1)
  
  return exam1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExamScore::set_allocated_exam1(std::string* exam1) {
  if (exam1 != nullptr) {
    
  } else {
    
  }
  exam1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exam1);
  // @@protoc_insertion_point(field_set_allocated:DifferentialTest.ExamScore.exam1)
}

// int32 score1 = 2;
inline void ExamScore::clear_score1() {
  score1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExamScore::_internal_score1() const {
  return score1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExamScore::score1() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.ExamScore.score1)
  return _internal_score1();
}
inline void ExamScore::_internal_set_score1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score1_ = value;
}
inline void ExamScore::set_score1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score1(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.ExamScore.score1)
}

// string exam2 = 3;
inline void ExamScore::clear_exam2() {
  exam2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExamScore::exam2() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.ExamScore.exam2)
  return _internal_exam2();
}
inline void ExamScore::set_exam2(const std::string& value) {
  _internal_set_exam2(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.ExamScore.exam2)
}
inline std::string* ExamScore::mutable_exam2() {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.ExamScore.exam2)
  return _internal_mutable_exam2();
}
inline const std::string& ExamScore::_internal_exam2() const {
  return exam2_.GetNoArena();
}
inline void ExamScore::_internal_set_exam2(const std::string& value) {
  
  exam2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExamScore::set_exam2(std::string&& value) {
  
  exam2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialTest.ExamScore.exam2)
}
inline void ExamScore::set_exam2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exam2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialTest.ExamScore.exam2)
}
inline void ExamScore::set_exam2(const char* value, size_t size) {
  
  exam2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialTest.ExamScore.exam2)
}
inline std::string* ExamScore::_internal_mutable_exam2() {
  
  return exam2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExamScore::release_exam2() {
  // @@protoc_insertion_point(field_release:DifferentialTest.ExamScore.exam2)
  
  return exam2_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExamScore::set_allocated_exam2(std::string* exam2) {
  if (exam2 != nullptr) {
    
  } else {
    
  }
  exam2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exam2);
  // @@protoc_insertion_point(field_set_allocated:DifferentialTest.ExamScore.exam2)
}

// float score2 = 4;
inline void ExamScore::clear_score2() {
  score2_ = 0;
}
inline float ExamScore::_internal_score2() const {
  return score2_;
}
inline float ExamScore::score2() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.ExamScore.score2)
  return _internal_score2();
}
inline void ExamScore::_internal_set_score2(float value) {
  
  score2_ = value;
}
inline void ExamScore::set_score2(float value) {
  _internal_set_score2(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.ExamScore.score2)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TestEmployee

// int32 employ_id = 1;
inline void TestEmployee::clear_employ_id() {
  employ_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestEmployee::_internal_employ_id() const {
  return employ_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestEmployee::employ_id() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.TestEmployee.employ_id)
  return _internal_employ_id();
}
inline void TestEmployee::_internal_set_employ_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  employ_id_ = value;
}
inline void TestEmployee::set_employ_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_employ_id(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.TestEmployee.employ_id)
}

// string fullname = 2;
inline void TestEmployee::clear_fullname() {
  fullname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TestEmployee::fullname() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.TestEmployee.fullname)
  return _internal_fullname();
}
inline void TestEmployee::set_fullname(const std::string& value) {
  _internal_set_fullname(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.TestEmployee.fullname)
}
inline std::string* TestEmployee::mutable_fullname() {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.TestEmployee.fullname)
  return _internal_mutable_fullname();
}
inline const std::string& TestEmployee::_internal_fullname() const {
  return fullname_.GetNoArena();
}
inline void TestEmployee::_internal_set_fullname(const std::string& value) {
  
  fullname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TestEmployee::set_fullname(std::string&& value) {
  
  fullname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DifferentialTest.TestEmployee.fullname)
}
inline void TestEmployee::set_fullname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fullname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DifferentialTest.TestEmployee.fullname)
}
inline void TestEmployee::set_fullname(const char* value, size_t size) {
  
  fullname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DifferentialTest.TestEmployee.fullname)
}
inline std::string* TestEmployee::_internal_mutable_fullname() {
  
  return fullname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TestEmployee::release_fullname() {
  // @@protoc_insertion_point(field_release:DifferentialTest.TestEmployee.fullname)
  
  return fullname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TestEmployee::set_allocated_fullname(std::string* fullname) {
  if (fullname != nullptr) {
    
  } else {
    
  }
  fullname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fullname);
  // @@protoc_insertion_point(field_set_allocated:DifferentialTest.TestEmployee.fullname)
}

// int32 age = 3;
inline void TestEmployee::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestEmployee::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestEmployee::age() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.TestEmployee.age)
  return _internal_age();
}
inline void TestEmployee::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void TestEmployee::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.TestEmployee.age)
}

// .DifferentialTest.Company employer = 4;
inline bool TestEmployee::_internal_has_employer() const {
  return this != internal_default_instance() && employer_ != nullptr;
}
inline bool TestEmployee::has_employer() const {
  return _internal_has_employer();
}
inline void TestEmployee::clear_employer() {
  if (GetArenaNoVirtual() == nullptr && employer_ != nullptr) {
    delete employer_;
  }
  employer_ = nullptr;
}
inline const ::DifferentialTest::Company& TestEmployee::_internal_employer() const {
  const ::DifferentialTest::Company* p = employer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DifferentialTest::Company*>(
      &::DifferentialTest::_Company_default_instance_);
}
inline const ::DifferentialTest::Company& TestEmployee::employer() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.TestEmployee.employer)
  return _internal_employer();
}
inline ::DifferentialTest::Company* TestEmployee::release_employer() {
  // @@protoc_insertion_point(field_release:DifferentialTest.TestEmployee.employer)
  
  ::DifferentialTest::Company* temp = employer_;
  employer_ = nullptr;
  return temp;
}
inline ::DifferentialTest::Company* TestEmployee::_internal_mutable_employer() {
  
  if (employer_ == nullptr) {
    auto* p = CreateMaybeMessage<::DifferentialTest::Company>(GetArenaNoVirtual());
    employer_ = p;
  }
  return employer_;
}
inline ::DifferentialTest::Company* TestEmployee::mutable_employer() {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.TestEmployee.employer)
  return _internal_mutable_employer();
}
inline void TestEmployee::set_allocated_employer(::DifferentialTest::Company* employer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete employer_;
  }
  if (employer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      employer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, employer, submessage_arena);
    }
    
  } else {
    
  }
  employer_ = employer;
  // @@protoc_insertion_point(field_set_allocated:DifferentialTest.TestEmployee.employer)
}

// repeated string areas = 5;
inline int TestEmployee::_internal_areas_size() const {
  return areas_.size();
}
inline int TestEmployee::areas_size() const {
  return _internal_areas_size();
}
inline void TestEmployee::clear_areas() {
  areas_.Clear();
}
inline std::string* TestEmployee::add_areas() {
  // @@protoc_insertion_point(field_add_mutable:DifferentialTest.TestEmployee.areas)
  return _internal_add_areas();
}
inline const std::string& TestEmployee::_internal_areas(int index) const {
  return areas_.Get(index);
}
inline const std::string& TestEmployee::areas(int index) const {
  // @@protoc_insertion_point(field_get:DifferentialTest.TestEmployee.areas)
  return _internal_areas(index);
}
inline std::string* TestEmployee::mutable_areas(int index) {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.TestEmployee.areas)
  return areas_.Mutable(index);
}
inline void TestEmployee::set_areas(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:DifferentialTest.TestEmployee.areas)
  areas_.Mutable(index)->assign(value);
}
inline void TestEmployee::set_areas(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:DifferentialTest.TestEmployee.areas)
  areas_.Mutable(index)->assign(std::move(value));
}
inline void TestEmployee::set_areas(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  areas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DifferentialTest.TestEmployee.areas)
}
inline void TestEmployee::set_areas(int index, const char* value, size_t size) {
  areas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DifferentialTest.TestEmployee.areas)
}
inline std::string* TestEmployee::_internal_add_areas() {
  return areas_.Add();
}
inline void TestEmployee::add_areas(const std::string& value) {
  areas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DifferentialTest.TestEmployee.areas)
}
inline void TestEmployee::add_areas(std::string&& value) {
  areas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DifferentialTest.TestEmployee.areas)
}
inline void TestEmployee::add_areas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  areas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DifferentialTest.TestEmployee.areas)
}
inline void TestEmployee::add_areas(const char* value, size_t size) {
  areas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DifferentialTest.TestEmployee.areas)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestEmployee::areas() const {
  // @@protoc_insertion_point(field_list:DifferentialTest.TestEmployee.areas)
  return areas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestEmployee::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_list:DifferentialTest.TestEmployee.areas)
  return &areas_;
}

// repeated .DifferentialTest.EducationInfo education = 6;
inline int TestEmployee::_internal_education_size() const {
  return education_.size();
}
inline int TestEmployee::education_size() const {
  return _internal_education_size();
}
inline void TestEmployee::clear_education() {
  education_.Clear();
}
inline ::DifferentialTest::EducationInfo* TestEmployee::mutable_education(int index) {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.TestEmployee.education)
  return education_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialTest::EducationInfo >*
TestEmployee::mutable_education() {
  // @@protoc_insertion_point(field_mutable_list:DifferentialTest.TestEmployee.education)
  return &education_;
}
inline const ::DifferentialTest::EducationInfo& TestEmployee::_internal_education(int index) const {
  return education_.Get(index);
}
inline const ::DifferentialTest::EducationInfo& TestEmployee::education(int index) const {
  // @@protoc_insertion_point(field_get:DifferentialTest.TestEmployee.education)
  return _internal_education(index);
}
inline ::DifferentialTest::EducationInfo* TestEmployee::_internal_add_education() {
  return education_.Add();
}
inline ::DifferentialTest::EducationInfo* TestEmployee::add_education() {
  // @@protoc_insertion_point(field_add:DifferentialTest.TestEmployee.education)
  return _internal_add_education();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialTest::EducationInfo >&
TestEmployee::education() const {
  // @@protoc_insertion_point(field_list:DifferentialTest.TestEmployee.education)
  return education_;
}

// .DifferentialTest.DependentInfo dependents = 7;
inline bool TestEmployee::_internal_has_dependents() const {
  return this != internal_default_instance() && dependents_ != nullptr;
}
inline bool TestEmployee::has_dependents() const {
  return _internal_has_dependents();
}
inline void TestEmployee::clear_dependents() {
  if (GetArenaNoVirtual() == nullptr && dependents_ != nullptr) {
    delete dependents_;
  }
  dependents_ = nullptr;
}
inline const ::DifferentialTest::DependentInfo& TestEmployee::_internal_dependents() const {
  const ::DifferentialTest::DependentInfo* p = dependents_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DifferentialTest::DependentInfo*>(
      &::DifferentialTest::_DependentInfo_default_instance_);
}
inline const ::DifferentialTest::DependentInfo& TestEmployee::dependents() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.TestEmployee.dependents)
  return _internal_dependents();
}
inline ::DifferentialTest::DependentInfo* TestEmployee::release_dependents() {
  // @@protoc_insertion_point(field_release:DifferentialTest.TestEmployee.dependents)
  
  ::DifferentialTest::DependentInfo* temp = dependents_;
  dependents_ = nullptr;
  return temp;
}
inline ::DifferentialTest::DependentInfo* TestEmployee::_internal_mutable_dependents() {
  
  if (dependents_ == nullptr) {
    auto* p = CreateMaybeMessage<::DifferentialTest::DependentInfo>(GetArenaNoVirtual());
    dependents_ = p;
  }
  return dependents_;
}
inline ::DifferentialTest::DependentInfo* TestEmployee::mutable_dependents() {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.TestEmployee.dependents)
  return _internal_mutable_dependents();
}
inline void TestEmployee::set_allocated_dependents(::DifferentialTest::DependentInfo* dependents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dependents_;
  }
  if (dependents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dependents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dependents, submessage_arena);
    }
    
  } else {
    
  }
  dependents_ = dependents;
  // @@protoc_insertion_point(field_set_allocated:DifferentialTest.TestEmployee.dependents)
}

// double floatpoint = 8;
inline void TestEmployee::clear_floatpoint() {
  floatpoint_ = 0;
}
inline double TestEmployee::_internal_floatpoint() const {
  return floatpoint_;
}
inline double TestEmployee::floatpoint() const {
  // @@protoc_insertion_point(field_get:DifferentialTest.TestEmployee.floatpoint)
  return _internal_floatpoint();
}
inline void TestEmployee::_internal_set_floatpoint(double value) {
  
  floatpoint_ = value;
}
inline void TestEmployee::set_floatpoint(double value) {
  _internal_set_floatpoint(value);
  // @@protoc_insertion_point(field_set:DifferentialTest.TestEmployee.floatpoint)
}

// repeated .DifferentialTest.ExamScore exam_score = 9;
inline int TestEmployee::_internal_exam_score_size() const {
  return exam_score_.size();
}
inline int TestEmployee::exam_score_size() const {
  return _internal_exam_score_size();
}
inline void TestEmployee::clear_exam_score() {
  exam_score_.Clear();
}
inline ::DifferentialTest::ExamScore* TestEmployee::mutable_exam_score(int index) {
  // @@protoc_insertion_point(field_mutable:DifferentialTest.TestEmployee.exam_score)
  return exam_score_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialTest::ExamScore >*
TestEmployee::mutable_exam_score() {
  // @@protoc_insertion_point(field_mutable_list:DifferentialTest.TestEmployee.exam_score)
  return &exam_score_;
}
inline const ::DifferentialTest::ExamScore& TestEmployee::_internal_exam_score(int index) const {
  return exam_score_.Get(index);
}
inline const ::DifferentialTest::ExamScore& TestEmployee::exam_score(int index) const {
  // @@protoc_insertion_point(field_get:DifferentialTest.TestEmployee.exam_score)
  return _internal_exam_score(index);
}
inline ::DifferentialTest::ExamScore* TestEmployee::_internal_add_exam_score() {
  return exam_score_.Add();
}
inline ::DifferentialTest::ExamScore* TestEmployee::add_exam_score() {
  // @@protoc_insertion_point(field_add:DifferentialTest.TestEmployee.exam_score)
  return _internal_add_exam_score();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DifferentialTest::ExamScore >&
TestEmployee::exam_score() const {
  // @@protoc_insertion_point(field_list:DifferentialTest.TestEmployee.exam_score)
  return exam_score_;
}

// map<string, string> info = 10;
inline int TestEmployee::_internal_info_size() const {
  return info_.size();
}
inline int TestEmployee::info_size() const {
  return _internal_info_size();
}
inline void TestEmployee::clear_info() {
  info_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TestEmployee::_internal_info() const {
  return info_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TestEmployee::info() const {
  // @@protoc_insertion_point(field_map:DifferentialTest.TestEmployee.info)
  return _internal_info();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TestEmployee::_internal_mutable_info() {
  return info_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TestEmployee::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:DifferentialTest.TestEmployee.info)
  return _internal_mutable_info();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DifferentialTest

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_differential_5ftest_2eproto
